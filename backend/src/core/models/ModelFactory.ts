import { ModelProvider, ModelConfig } from './ModelProvider';

export class ModelFactory {
  private static providers: Map<string, ModelProvider> = new Map();

  static async initialize(): Promise<void> {
    // Por enquanto, apenas log - implementa√ß√£o simplificada
    console.log('üîß ModelFactory inicializado (implementa√ß√£o simplificada)');
  }

  static getProvider(providerName: string): ModelProvider | null {
    return this.providers.get(providerName) || null;
  }

  static getAvailableProviders(): string[] {
    return Array.from(this.providers.keys());
  }

  static async generateContent(prompt: string, config: ModelConfig): Promise<string> {
    // Implementa√ß√£o simplificada - usar configura√ß√£o do .env.local
    throw new Error('ModelFactory.generateContent n√£o implementado ainda');
  }

  static async generateEmbedding(text: string, config: ModelConfig): Promise<number[]> {
    // Implementa√ß√£o simplificada - usar configura√ß√£o do .env.local
    throw new Error('ModelFactory.generateEmbedding n√£o implementado ainda');
  }
}
