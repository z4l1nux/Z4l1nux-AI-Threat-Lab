import { useState, useCallback, useEffect } from 'react';
import { SystemInfo, IdentifiedThreat, ReportData, StrideCapecMapType } from '../types';
import { analyzeThreatsAndMitigations, refineAnalysis, summarizeSystemDescription, generateAttackTreeMermaid } from '../services/aiService';
import { useModelSelection } from './useModelSelection';
import { ragService } from '../services/ragService';


export const useThreatModeler = () => {
  const [systemInfo, setSystemInfo] = useState<SystemInfo | null>(null);
  const [threats, setThreats] = useState<IdentifiedThreat[] | null>(null);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [strideCapecMap, setStrideCapecMap] = useState<StrideCapecMapType | null>(null);
  const [ragInitialized, setRagInitialized] = useState<boolean>(false);
  
  const { getModelConfig } = useModelSelection();

  // Verificar se o RAG est√° inicializado antes de buscar o mapeamento
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null;
    
    const checkRAGStatus = async () => {
      try {
        const health = await ragService.checkHealth();
        const isInitialized = health.services.rag === 'initialized';
        setRagInitialized(isInitialized);
        
        if (isInitialized) {
          console.log('‚úÖ RAG inicializado! Pronto para buscar mapeamento STRIDE-CAPEC.');
          // Parar o polling quando o RAG estiver inicializado
          if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
          }
        } else {
          console.log('‚è≥ Aguardando RAG inicializar...');
        }
      } catch (error) {
        console.error('‚ùå Erro ao verificar status do RAG:', error);
        setRagInitialized(false);
      }
    };

    // Verificar imediatamente
    checkRAGStatus();

    // Verificar periodicamente at√© o RAG estar pronto (apenas se n√£o estiver inicializado)
    if (!ragInitialized) {
      intervalId = setInterval(checkRAGStatus, 2000);
    }

    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [ragInitialized]);

  useEffect(() => {
    // S√≥ buscar o mapeamento quando o RAG estiver inicializado
    if (!ragInitialized) {
      console.log('‚è≥ Aguardando RAG inicializar antes de buscar mapeamento STRIDE-CAPEC...');
      return;
    }

    const fetchMapping = async () => {
      try {
        const BACKEND_URL = 'http://localhost:3001';
        console.log('üìã Buscando mapeamento STRIDE-CAPEC do RAG...');
        
        const response = await fetch(`${BACKEND_URL}/api/stride-capec-mapping`);
        
        if (!response.ok) {
          if (response.status === 503) {
            console.warn('‚ö†Ô∏è Sistema RAG n√£o inicializado (ainda processando)');
            // N√£o mostrar erro imediatamente, aguardar mais um pouco
            return;
          }
          
          if (response.status === 404) {
            console.warn('‚ö†Ô∏è Mapeamento STRIDE-CAPEC n√£o encontrado no RAG');
            setError("‚ö†Ô∏è Mapeamento STRIDE-CAPEC n√£o encontrado. Por favor:\n\n1. Fa√ßa upload do arquivo 'capec-stride-mapping-completo.md' (pasta src/knowledge-base/)\n2. Aguarde o processamento no painel RAG (status: verde)\n3. Recarregue a p√°gina ou tente gerar o modelo novamente\n\nüìÅ Arquivo recomendado: src/knowledge-base/capec-stride-mapping-completo.md\nüì¶ Formatos aceitos: JSON, PDF, Markdown, TXT, DOCX, DOC");
            setStrideCapecMap([]);
            return;
          }
          
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || `Erro HTTP! status: ${response.status}`);
        }
        
        const data = await response.json();
        const mapping: StrideCapecMapType = data.mapping || [];
        
        if (mapping.length === 0) {
          console.warn('‚ö†Ô∏è Mapeamento STRIDE-CAPEC vazio');
          setError("‚ö†Ô∏è Mapeamento STRIDE-CAPEC est√° vazio ou n√£o foi encontrado. Por favor:\n\n1. Verifique se o documento cont√©m o mapeamento STRIDE-CAPEC\n2. Formatos aceitos: JSON, PDF, Markdown, TXT, DOCX, DOC\n3. Consulte MAPEAMENTO_STRIDE_CAPEC.md para exemplos\n4. Fa√ßa upload de um documento v√°lido\n\nO documento deve conter as 6 categorias STRIDE:\n- Spoofing\n- Tampering\n- Repudiation\n- Information Disclosure\n- Denial of Service\n- Elevation of Privilege\n\nCom seus respectivos CAPECs (ex: CAPEC-98: Phishing)");
        } else {
          console.log(`‚úÖ Mapeamento STRIDE-CAPEC carregado: ${mapping.length} categorias`);
          setError(null); // Limpar erro se houver sucesso
        }
        
        setStrideCapecMap(mapping);
      } catch (e: any) {
        console.error("Falha ao carregar o mapeamento STRIDE-CAPEC:", e);
        
        if (e.message?.includes('Failed to fetch')) {
          setError("‚ùå Backend n√£o dispon√≠vel. Por favor:\n1. Inicie o backend: npm run dev:backend\n2. Aguarde o backend iniciar\n3. Recarregue a p√°gina");
        } else {
          setError(`‚ùå Erro ao carregar mapeamento: ${e.message}\n\nVerifique os logs do console para mais detalhes.`);
        }
        
        setStrideCapecMap([]);
      }
    };
    fetchMapping();
  }, [ragInitialized]); // Executar quando ragInitialized mudar para true

  const generateThreatModel = useCallback(async (currentSystemInfo: SystemInfo) => {
    if (!strideCapecMap) {
      setError("Mapeamento STRIDE-CAPEC n√£o carregado. N√£o √© poss√≠vel gerar o modelo.");
      setIsLoading(false); // Ensure loading is stopped
      return;
    }
    if (strideCapecMap.length === 0 && !error) { // If map is empty but no fetch error, it might be an issue with the file content
        setError("Mapeamento STRIDE-CAPEC est√° vazio. Verifique o arquivo 'mapeamento-stride-capec-pt.json'.");
        setIsLoading(false);
        return;
    }
    setIsLoading(true);
    setError(null);

    try {
      // Aguardar um pouco para garantir que o estado do modelo seja atualizado
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Obter configura√ß√£o do modelo FRESCAMENTE (n√£o usar cache)
      const modelConfig = getModelConfig();
      console.log('ü§ñ Configura√ß√£o do modelo atual:', modelConfig);
      console.log('üîç Enviando para backend:', JSON.stringify(modelConfig, null, 2));
      console.log('‚è∞ Timestamp da an√°lise:', new Date().toISOString());
      
      // Verificar se o modelo mudou desde a √∫ltima an√°lise
      const currentTime = Date.now();
      console.log('üïê Timestamp atual:', currentTime);
      
      // 0. Enviar descri√ß√£o do sistema ao backend RAG para processamento autom√°tico
      try {
        const BACKEND_URL = 'http://localhost:3001';
        const systemDocumentName = `Sistema_${currentSystemInfo.systemName}_${new Date().toISOString().split('T')[0]}`;
        const systemDocumentContent = `
Nome do Sistema: ${currentSystemInfo.systemName}

DESCRI√á√ÉO COMPLETA DO SISTEMA:
${currentSystemInfo.generalDescription}

COMPONENTES:
${currentSystemInfo.components || 'N√£o informado'}

DADOS SENS√çVEIS:
${currentSystemInfo.sensitiveData || 'N√£o informado'}

TECNOLOGIAS:
${currentSystemInfo.technologies || 'N√£o informado'}

AUTENTICA√á√ÉO:
${currentSystemInfo.authentication || 'N√£o informado'}

PERFIS DE USU√ÅRIO:
${currentSystemInfo.userProfiles || 'N√£o informado'}

INTEGRA√á√ïES EXTERNAS:
${currentSystemInfo.externalIntegrations || 'N√£o informado'}
        `.trim();

        console.log(`üì§ Enviando informa√ß√µes do sistema ao RAG: ${systemDocumentName}`);
        
        const ragResponse = await fetch(`${BACKEND_URL}/api/documents/text`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            name: systemDocumentName, 
            content: systemDocumentContent,
            modelConfig: modelConfig
          })
        });

        if (ragResponse.ok) {
          console.log(`‚úÖ Informa√ß√µes do sistema processadas no RAG com sucesso`);
        } else {
          console.warn('‚ö†Ô∏è Falha ao processar informa√ß√µes no RAG, continuando sem RAG');
        }
      } catch (ragError) {
        console.warn('‚ö†Ô∏è Erro ao enviar informa√ß√µes ao RAG, continuando sem RAG:', ragError);
      }

      // 1. Modelagem de amea√ßas com a descri√ß√£o COMPLETA
      setSystemInfo(currentSystemInfo);
      const identifiedThreats = await analyzeThreatsAndMitigations(currentSystemInfo, strideCapecMap, modelConfig);
      setThreats(identifiedThreats);
      
      // 2. Resumir e estruturar informa√ß√µes do sistema via IA para exibi√ß√£o
      console.log('üìù Resumindo informa√ß√µes do sistema para exibi√ß√£o...');
      const summarizedInfo = await summarizeSystemDescription(currentSystemInfo.generalDescription || "", modelConfig);
      
      // Mesclar informa√ß√µes resumidas com dados originais
      const systemInfoWithSummary = {
        ...currentSystemInfo,
        generalDescription: summarizedInfo.generalDescription || currentSystemInfo.generalDescription,
        components: summarizedInfo.components || currentSystemInfo.components || "N√£o informado",
        sensitiveData: summarizedInfo.sensitiveData || currentSystemInfo.sensitiveData || "N√£o informado",
        technologies: summarizedInfo.technologies || currentSystemInfo.technologies || "N√£o informado",
        authentication: summarizedInfo.authentication || currentSystemInfo.authentication || "N√£o informado",
        userProfiles: summarizedInfo.userProfiles || currentSystemInfo.userProfiles || "N√£o informado",
        externalIntegrations: summarizedInfo.externalIntegrations || currentSystemInfo.externalIntegrations || "N√£o informado"
      };
      
      console.log('‚úÖ Informa√ß√µes do sistema estruturadas:', systemInfoWithSummary);
      const newReportData: ReportData = {
        systemInfo: systemInfoWithSummary,
        threats: identifiedThreats,
        generatedAt: new Date().toISOString(),
      };
      try {
        const mermaid = await generateAttackTreeMermaid(identifiedThreats, currentSystemInfo.systemName, modelConfig);
        setReportData({ ...newReportData, attackTreeMermaid: mermaid });
      } catch (err) {
        console.warn('Falha ao gerar Mermaid de √°rvore de ataque:', err);
        setReportData(newReportData);
      }
    } catch (e: any) {
      console.error("Erro ao gerar modelo de amea√ßas:", e);
      setError(e.message || "Ocorreu um erro desconhecido durante a gera√ß√£o do modelo de amea√ßas.");
    } finally {
      setIsLoading(false);
    }
  }, [strideCapecMap, error]); // Remover getModelConfig para evitar cache
  
  const updateReportMarkdown = useCallback((markdown: string) => {
      console.log("Markdown do relat√≥rio atualizado (no hook, se necess√°rio):", markdown.substring(0,100) + "...");
       if (reportData) {
       }
  }, [reportData]);

  const refineThreatModel = useCallback(async (currentMarkdown: string) => {
    if (!systemInfo || !strideCapecMap) {
      setError("Informa√ß√µes do sistema ou mapeamento STRIDE-CAPEC n√£o est√£o dispon√≠veis para refinamento.");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const modelConfig = getModelConfig();
      await refineAnalysis(
        currentMarkdown,
        modelConfig
      );

      // Para refinamento, mantemos as amea√ßas originais e apenas atualizamos o markdown
      const newReportData: ReportData = {
        systemInfo: systemInfo, // Keep original system info
        threats: threats || [], // Keep original threats
        generatedAt: new Date().toISOString(), // Update timestamp
      };
      
      // N√£o geramos novo Mermaid para refinamento, mantemos o original
      setReportData(newReportData);

    } catch (e: any) {
      console.error("Erro ao refinar an√°lise:", e);
      setError(e.message || "Ocorreu um erro desconhecido durante o refinamento da an√°lise.");
    } finally {
      setIsLoading(false);
    }
  }, [systemInfo, strideCapecMap]); // Remover getModelConfig para evitar cache


  // Fun√ß√£o para resetar todo o estado e come√ßar uma nova modelagem
  const resetThreatModel = useCallback(() => {
    console.log('üîÑ Resetando modelagem de amea√ßas...');
    setSystemInfo(null);
    setThreats(null);
    setReportData(null);
    setError(null);
    // Manter strideCapecMap e ragInitialized (n√£o precisam ser recarregados)
    console.log('‚úÖ Estado resetado! Pronto para nova modelagem.');
    console.log('üí° Dica: Troque o modelo no seletor se necess√°rio, depois fa√ßa nova an√°lise.');
    console.log('‚è≥ Aguarde 1 segundo ap√≥s trocar o modelo antes de analisar para garantir sincroniza√ß√£o.');
  }, []);

  return {
    systemInfo,
    threats,
    reportData,
    isLoading,
    error,
    generateThreatModel,
    updateReportMarkdown,
    refineThreatModel,
    setSystemInfo,
    resetThreatModel  // Nova fun√ß√£o para limpar o estado
  };
};