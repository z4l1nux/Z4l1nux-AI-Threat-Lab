import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { SystemInfo, IdentifiedThreat, StrideCapecMapType } from '../types';
// import { ragService, RAGContext } from '../src/services/ragService';

const API_KEY = process.env.GEMINI_API_KEY || process.env.API_KEY; // Support common env var names

if (!API_KEY) {
  console.warn(
    "A chave da API Gemini n√£o est√° configurada em process.env.GEMINI_API_KEY ou process.env.API_KEY. As funcionalidades de IA n√£o funcionar√£o."
  );
}

const ai = API_KEY ? new GoogleGenAI({ apiKey: API_KEY }) : null;

// Configura√ß√£o inteligente de modelos
const MODEL_CONFIG = {
  // Modelos dispon√≠veis ordenados por capacidade/custo
  MODELS: {
    LITE: 'gemini-2.5-flash-lite-preview-06-17',      // Mais barato, tarefas simples
    FLASH: 'gemini-2.5-flash',                         // Equilibrado, uso geral
    FLASH_LEGACY: 'gemini-1.5-flash-latest',          // Fallback confi√°vel
    PRO: 'gemini-2.5-pro'                             // Mais caro, tarefas complexas
  },
  
  // Limites para decis√£o autom√°tica de modelo
  THRESHOLDS: {
    SIMPLE_TASK_TOKENS: 5000,        // < 5k tokens = tarefa simples
    COMPLEX_TASK_TOKENS: 50000,      // > 50k tokens = tarefa complexa
    MAX_RETRIES: 2                   // M√°ximo de tentativas com modelos alternativos
  }
};

// Fun√ß√£o para calcular complexidade aproximada da tarefa
const calculateTaskComplexity = (
  systemInfo: SystemInfo, 
  additionalData?: string
): 'SIMPLE' | 'MEDIUM' | 'COMPLEX' => {
  const systemInfoStr = JSON.stringify(systemInfo);
  const totalLength = systemInfoStr.length + (additionalData?.length || 0);
  
  // Fatores de complexidade
  const componentCount = systemInfo.components?.split(',').length || 0;
  const hasExternalIntegrations = systemInfo.externalIntegrations && 
    systemInfo.externalIntegrations.toLowerCase() !== 'n√£o informado';
  const hasComplexAuth = systemInfo.authentication && 
    systemInfo.authentication.toLowerCase().includes('oauth');
  
  // C√°lculo de pontua√ß√£o de complexidade
  let complexityScore = 0;
  
  // Tamanho do conte√∫do
  if (totalLength > MODEL_CONFIG.THRESHOLDS.COMPLEX_TASK_TOKENS) complexityScore += 3;
  else if (totalLength > MODEL_CONFIG.THRESHOLDS.SIMPLE_TASK_TOKENS) complexityScore += 1;
  
  // N√∫mero de componentes
  if (componentCount > 10) complexityScore += 2;
  else if (componentCount > 5) complexityScore += 1;
  
  // Integra√ß√µes externas
  if (hasExternalIntegrations) complexityScore += 1;
  
  // Autentica√ß√£o complexa
  if (hasComplexAuth) complexityScore += 1;
  
  // Classifica√ß√£o final
  if (complexityScore >= 5) return 'COMPLEX';
  if (complexityScore >= 2) return 'MEDIUM';
  return 'SIMPLE';
};

// Fun√ß√£o para selecionar o modelo ideal baseado na tarefa
const selectOptimalModel = (
  taskType: 'ANALYSIS' | 'REFINEMENT' | 'SUMMARY',
  complexity: 'SIMPLE' | 'MEDIUM' | 'COMPLEX',
  retryCount: number = 0
): string => {
  // Estrat√©gia de sele√ß√£o baseada em tipo de tarefa e complexidade
  switch (taskType) {
    case 'SUMMARY':
      // Resumos s√£o geralmente tarefas simples
      return retryCount === 0 ? MODEL_CONFIG.MODELS.LITE : MODEL_CONFIG.MODELS.FLASH;
      
    case 'ANALYSIS': {
      // Para √°rvore de ataque, for√ßar PRO
      if (currentGenerationContext.currentTask === 'ATTACK_TREE') {
        return MODEL_CONFIG.MODELS.PRO;
      }
      // An√°lise de amea√ßas requer mais capacidade
      if (complexity === 'COMPLEX') {
        return retryCount === 0 ? MODEL_CONFIG.MODELS.PRO : MODEL_CONFIG.MODELS.FLASH;
      } else if (complexity === 'MEDIUM') {
        return retryCount === 0 ? MODEL_CONFIG.MODELS.FLASH : MODEL_CONFIG.MODELS.FLASH_LEGACY;
      } else {
        return retryCount === 0 ? MODEL_CONFIG.MODELS.FLASH : MODEL_CONFIG.MODELS.LITE;
      }
    }
    case 'REFINEMENT':
      // Refinamento requer capacidade de racioc√≠nio
      if (complexity === 'COMPLEX') {
        return retryCount === 0 ? MODEL_CONFIG.MODELS.PRO : MODEL_CONFIG.MODELS.FLASH;
      } else {
        return retryCount === 0 ? MODEL_CONFIG.MODELS.FLASH : MODEL_CONFIG.MODELS.FLASH_LEGACY;
      }
      
    default:
      return MODEL_CONFIG.MODELS.FLASH;
  }
};

// Contexto simples para sinalizar tipo de tarefa atual durante sele√ß√£o de modelo
const currentGenerationContext: { currentTask: 'DEFAULT' | 'ATTACK_TREE' } = { currentTask: 'DEFAULT' };

// Fun√ß√£o para executar gera√ß√£o de conte√∫do com retry inteligente
const executeWithIntelligentRetry = async (
  prompt: string,
  taskType: 'ANALYSIS' | 'REFINEMENT' | 'SUMMARY',
  complexity: 'SIMPLE' | 'MEDIUM' | 'COMPLEX',
  maxRetries: number = MODEL_CONFIG.THRESHOLDS.MAX_RETRIES
): Promise<GenerateContentResponse> => {
  let lastError: Error | null = null;
  
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      const selectedModel = selectOptimalModel(taskType, complexity, attempt);
      
      console.log(`[Gemini Service] Tentativa ${attempt + 1}/${maxRetries + 1} usando modelo: ${selectedModel} (Complexidade: ${complexity})`);
      
      const response = await ai!.models.generateContent({
        model: selectedModel,
        contents: prompt,
        config: { responseMimeType: "application/json" }
      });
      
      console.log(`[Gemini Service] Sucesso com modelo: ${selectedModel}`);
      return response;
      
    } catch (error) {
      lastError = error as Error;
      console.warn(`[Gemini Service] Erro com modelo (tentativa ${attempt + 1}):`, error);
      
      // Se √© a √∫ltima tentativa, lan√ßa o erro
      if (attempt === maxRetries) {
        break;
      }
      
      // Aguarda um pouco antes da pr√≥xima tentativa
      await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
    }
  }
  
  throw new Error(`Falha em todas as tentativas de gera√ß√£o de conte√∫do. √öltimo erro: ${lastError?.message}`);
};

const parseJsonFromText = (text: string | undefined): any => {
  if (!text) throw new Error("Texto da resposta da IA est√° indefinido.");
  let jsonStr = text.trim();
  const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s; // Matches ```json ... ``` or ``` ... ```
  const match = jsonStr.match(fenceRegex);
  if (match && match[2]) {
    jsonStr = match[2].trim();
  }
  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    console.error("Falha ao analisar resposta JSON:", e, "Texto original:", jsonStr);
    throw new Error(`Falha ao analisar resposta da IA como JSON. Conte√∫do: ${jsonStr.substring(0,500)}...`);
  }
};

// Fun√ß√£o para buscar contexto RAG relevante
const searchRAGContext = async (systemInfo: SystemInfo): Promise<any | null> => {
  try {
    const BACKEND_URL = 'http://localhost:3001';
    
    // Construir query de busca baseada nas informa√ß√µes do sistema
    const searchQueries = [
      `threat modeling ${systemInfo.systemName}`,
      `security threats ${systemInfo.technologies}`,
      `STRIDE analysis ${systemInfo.components}`,
      `vulnerabilities ${systemInfo.authentication}`,
      systemInfo.generalDescription
    ].filter(q => q && q.trim().length > 0);

    // Buscar contexto para a query mais relevante
    const mainQuery = searchQueries[0] || 'threat modeling security analysis';
    console.log(`üîç Buscando contexto RAG para: "${mainQuery.substring(0, 50)}..." (Sistema: "${systemInfo.systemName}")`);
    
    const response = await fetch(`${BACKEND_URL}/api/search/context`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        query: mainQuery, 
        limit: 5,
        systemContext: systemInfo.systemName // Filtro por sistema
      })
    });

    if (!response.ok) {
      console.warn('‚ö†Ô∏è Backend RAG n√£o dispon√≠vel, continuando sem contexto');
      return null;
    }

    const context = await response.json();
    
    if (context.sources && context.sources.length > 0) {
      console.log(`‚úÖ Contexto RAG encontrado: ${context.sources.length} fontes, confian√ßa: ${context.confidence.toFixed(1)}%`);
      return context;
    }
    
    return null;
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao buscar contexto RAG, continuando sem contexto:', error);
    return null;
  }
};

export const analyzeThreatsAndMitigations = async (
  systemInfo: SystemInfo,
  strideCapecMap: StrideCapecMapType
): Promise<IdentifiedThreat[]> => {
  if (!ai) throw new Error("Chave da API Gemini n√£o configurada.");
  
  // Buscar contexto RAG relevante
  const ragContext = await searchRAGContext(systemInfo);
  
  // Calcular complexidade da tarefa
  const complexity = calculateTaskComplexity(systemInfo, JSON.stringify(strideCapecMap));
  console.log(`[Gemini Service] Complexidade da an√°lise detectada: ${complexity}`);
  
  // Construir contexto RAG para o prompt
  const ragContextSection = ragContext ? `

CONTEXTO ADICIONAL DE CONHECIMENTO (RAG):
${ragContext.context}

FONTES DE REFER√äNCIA:
${(ragContext.sources as any[]).map((source: any, index: number) => 
  `${index + 1}. ${source.documento.metadata.documentName || 'Documento'} (Score: ${source.score.toFixed(3)})`
).join('\n')}

CONFIAN√áA DO CONTEXTO: ${ragContext.confidence.toFixed(1)}%

INSTRU√á√ïES PARA USO DO CONTEXTO:
- Use as informa√ß√µes do contexto acima para enriquecer sua an√°lise de amea√ßas
- Referencie pr√°ticas e padr√µes mencionados no contexto quando relevantes
- Adapte as mitiga√ß√µes sugeridas com base no conhecimento contextual
- Mantenha consist√™ncia com as melhores pr√°ticas identificadas no contexto

` : `

NOTA: Nenhum contexto RAG adicional dispon√≠vel. Baseie a an√°lise apenas no conhecimento interno.

`;
  
  const prompt = `${ragContextSection}
Informa√ß√µes do Sistema (em Portugu√™s):
${JSON.stringify(systemInfo, null, 2)}

Mapeamento STRIDE para CAPEC (use estes CAPECs como sugest√µes para a categoria STRIDE relevante):
${JSON.stringify(strideCapecMap, null, 2)}

Tarefa (Responda em Portugu√™s do Brasil):
Analise as informa√ß√µes do sistema fornecidas. Para cada componente e fluxo de dados significativo identificado, realize uma an√°lise de amea√ßas STRIDE.
Para cada amea√ßa identificada:
1. Especifique o elemento do sistema (nome do componente ou descri√ß√£o do fluxo).
2. Identifique a categoria STRIDE (use apenas o termo em ingl√™s: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege).
3. Descreva um cen√°rio de amea√ßa conciso e espec√≠fico para este elemento e categoria STRIDE (em Portugu√™s).
4. Selecione o ID e Nome CAPEC mais relevante do Mapeamento STRIDE para CAPEC fornecido para a categoria STRIDE identificada. Se m√∫ltiplos forem relevantes, escolha o principal. (Nomes CAPEC podem permanecer em Ingl√™s).
5. Forne√ßa uma breve descri√ß√£o do padr√£o de ataque CAPEC selecionado, adaptada ao cen√°rio (em Portugu√™s).
6. Sugira recomenda√ß√µes de mitiga√ß√£o pr√°ticas e acion√°veis (2-3 pontos chave, em Portugu√™s).
7. Avalie o impacto potencial da amea√ßa, classificando como CRITICAL, HIGH, MEDIUM ou LOW, considerando o poss√≠vel dano ao neg√≥cio, usu√°rios ou dados.
8. Relacione a amea√ßa ao item mais relevante do OWASP TOP 10 (ex: "A01:2021 - Broken Access Control").

IMPORTANTE - IDIOMA:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- APENAS as categorias STRIDE devem permanecer em ingl√™s (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege)
- Nomes CAPEC podem permanecer em ingl√™s, MAS suas descri√ß√µes devem ser em portugu√™s
- Classifica√ß√µes OWASP TOP 10 podem permanecer em ingl√™s, mas qualquer texto explicativo deve ser em portugu√™s
- Cen√°rios de amea√ßa, descri√ß√µes CAPEC e recomenda√ß√µes de mitiga√ß√£o DEVEM SER ESCRITOS EM PORTUGU√äS DO BRASIL

Sa√≠da:
Retorne o resultado como um array JSON de objetos. Cada objeto deve seguir esta estrutura exata (mantenha as chaves do JSON em ingl√™s):
{
  "elementName": "string (nome do componente/fluxo como definido)",
  "strideCategory": "string (ex: 'Spoofing')",
  "threatScenario": "string (em Portugu√™s)",
  "capecId": "string (ex: 'CAPEC-113')",
  "capecName": "string (ex: 'Session Hijacking')",
  "capecDescription": "string (descri√ß√£o do ataque CAPEC, em Portugu√™s)",
  "mitigationRecommendations": "string (passos de mitiga√ß√£o acion√°veis, em Portugu√™s)",
  "impact": "string (CRITICAL, HIGH, MEDIUM ou LOW)",
  "owaspTop10": "string (ex: 'A01:2021 - Broken Access Control')"
}

Importante:
- Assegure que a sa√≠da seja APENAS o array JSON. N√£o inclua nenhum outro texto, explica√ß√µes ou formata√ß√£o markdown como 'tr√™s crases' ou 'formata√ß√£o markdown de c√≥digo' fora do pr√≥prio array JSON.
- Forne√ßa pelo menos 5-10 amea√ßas cobrindo diferentes componentes/fluxos e categorias STRIDE.
- TODO O CONTE√öDO DE TEXTO DENTRO DOS VALORES JSON (COMO threatScenario, capecDescription, mitigationRecommendations) DEVE ESTAR EM PORTUGU√äS DO BRASIL.
- REPITO: ESCREVA EM PORTUGU√äS DO BRASIL - apenas categorias STRIDE em ingl√™s!

Exemplo (Ilustrativo - adapte aos elementos reais do sistema e use o mapeamento fornecido):
[
  {
    "elementName": "API de Autentica√ß√£o de Usu√°rio",
    "strideCategory": "Spoofing",
    "threatScenario": "Um invasor tenta se passar por um usu√°rio leg√≠timo enviando credenciais roubadas para o endpoint de login.",
    "capecId": "CAPEC-15",
    "capecName": "Credentials Dowsing",
    "capecDescription": "O invasor tenta sistematicamente adivinhar ou descobrir credenciais de login v√°lidas atrav√©s de v√°rios m√©todos como for√ßa bruta ou phishing.",
    "mitigationRecommendations": "Implementar Autentica√ß√£o Multi-Fator (MFA). Aplicar pol√≠ticas de senha forte e mecanismos de bloqueio de conta. Monitorar tentativas de login suspeitas.",
    "impact": "HIGH",
    "owaspTop10": "A07:2021 - Identification and Authentication Failures"
  }
]
`;
  
  const response = await executeWithIntelligentRetry(prompt, 'ANALYSIS', complexity);
  const parsedThreatsData = parseJsonFromText(response.text);

  if (!Array.isArray(parsedThreatsData)) {
    console.error("Resposta da IA para amea√ßas n√£o foi um array:", parsedThreatsData);
    throw new Error("A resposta da IA para amea√ßas n√£o estava no formato de array esperado.");
  }

  return parsedThreatsData.map((threat: any, index: number) => ({
    ...threat,
    id: `threat-${index}-${Date.now()}`,
    elementName: threat.elementName || "N/D",
    strideCategory: threat.strideCategory || "N/D",
    threatScenario: threat.threatScenario || "N/D",
    capecId: threat.capecId || "N/D",
    capecName: threat.capecName || "N/D",
    capecDescription: threat.capecDescription || "N/D",
    mitigationRecommendations: threat.mitigationRecommendations || "N/D",
    impact: threat.impact || "N/D",
    owaspTop10: threat.owaspTop10 || "N/D",
  }));
};

/**
 * Gera uma √°rvore de ataque em Mermaid (graph TD ou mindmap) a partir das amea√ßas identificadas.
 * Retorna apenas o texto Mermaid v√°lido.
 */
export const generateAttackTreeMermaid = async (
  systemInfo: SystemInfo,
  threats: IdentifiedThreat[]
): Promise<string> => {
  if (!ai) throw new Error("Chave da API Gemini n√£o configurada.");

  const complexity = calculateTaskComplexity(systemInfo, JSON.stringify(threats));

  try {
    // Prompt melhorado baseado na abordagem Python
    const prompt = `
Voc√™ √© um especialista em modelagem de amea√ßas. Analise o sistema e as amea√ßas fornecidas e crie uma √Årvore de Ataque estruturada.

Sistema:
${JSON.stringify(systemInfo, null, 2)}

Amea√ßas Identificadas:
${JSON.stringify(threats, null, 2)}

Tarefa: Crie uma √°rvore de ataque em formato Mermaid flowchart que organize as amea√ßas por categoria STRIDE.

Regras IMPORTANTES:
- Use APENAS "flowchart TD" como cabe√ßalho
- Organize em subgraphs por categoria STRIDE
- Para cada amea√ßa, crie: Elemento ‚Üí CAPEC ‚Üí Cen√°rio
- Use IDs √∫nicos e simples (ex: S1, S2, T1, T2)
- Evite caracteres especiais nos r√≥tulos
- Mantenha r√≥tulos curtos mas descritivos
- N√ÉO use mindmap ou sintaxes espec√≠ficas de outros diagramas

Exemplo de estrutura esperada:
flowchart TD
  ROOT["Ataques ao Sistema"]
  subgraph S[Spoofing]
    S1[Elemento A] --> S1C[CAPEC-xxx: Nome]
    S1C --> S1S[Cen√°rio curto]
  end
  subgraph T[Tampering]
    T1[Elemento B] --> T1C[CAPEC-yyy: Nome]
    T1C --> T1S[Cen√°rio curto]
  end
  ROOT --> S
  ROOT --> T

Retorne APENAS o c√≥digo Mermaid, sem explica√ß√µes ou markdown.`;

    const response = await executeWithIntelligentRetry(prompt, 'ANALYSIS', complexity, 0);
    let text = (response.text || '').trim();
    
    // Valida√ß√£o e limpeza robusta
    if (!/^(flowchart|graph)\s+(TD|LR|BT|RL)/i.test(text) || /^mindmap/i.test(text)) {
      return buildFlowchartFromThreats(systemInfo, threats);
    }

    // Sanitiza√ß√£o avan√ßada baseada na abordagem Python
    text = sanitizeMermaidText(text);
    
    // Valida√ß√£o final
    if (isValidMermaidFlowchart(text)) {
      return text;
    }
    
    return buildFlowchartFromThreats(systemInfo, threats);
  } catch (e) {
    console.debug('IA retornou diagrama n√£o padronizado, usando fallback.');
  }

  return buildFlowchartFromThreats(systemInfo, threats);
}

// Fun√ß√£o de sanitiza√ß√£o robusta baseada na abordagem Python
function sanitizeMermaidText(text: string): string {
  // Remove markdown code blocks
  text = text.replace(/^```\w*\n?|```$/g, '').trim();
  
  // Normaliza aspas e colchetes
  text = text.replace(/\[\"/g, '[').replace(/\"\]/g, ']').replace(/\"/g, "'");
  
  // Remove caracteres problem√°ticos para Mermaid
  text = text.replace(/[\/\\|{}()<>]/g, ' ');
  
  // Normaliza espa√ßos m√∫ltiplos
  text = text.replace(/\s+/g, ' ');
  
  // Remove linhas vazias extras
  text = text.replace(/\n\s*\n/g, '\n');
  
  return text.trim();
}

// Valida√ß√£o de estrutura Mermaid v√°lida
function isValidMermaidFlowchart(text: string): boolean {
  const lines = text.split('\n');
  const hasValidHeader = /^(flowchart|graph)\s+(TD|LR|BT|RL)/i.test(lines[0] || '');
  const hasNodes = lines.some(line => /\w+\[.*\]/.test(line));
  const hasConnections = lines.some(line => /\w+\s*-->\s*\w+/.test(line));
  
  return hasValidHeader && hasNodes && hasConnections;
}

// Fun√ß√£o de fallback melhorada baseada na estrutura JSON Python
function buildFlowchartFromThreats(systemInfo: SystemInfo, threats: IdentifiedThreat[]): string {
  const rootTitle = `Ataques ao ${systemInfo.systemName || 'Sistema'}`;
  
  // Fun√ß√µes de sanitiza√ß√£o
  const normalize = (s: string) => (s || 'N/D').replace(/\s+/g, ' ').trim();
  const safeLabel = (s: string) => normalize(s)
    .replace(/[\/\\|{}()<>\[\]"]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
  
  // Fun√ß√£o para quebrar linhas longas
  const wrapText = (text: string, maxWidth: number = 25): string => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';
    
    for (const word of words) {
      if ((currentLine + ' ' + word).length <= maxWidth) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    }
    if (currentLine) lines.push(currentLine);
    
    return lines.join('<br/>');
  };
  
  const truncate = (s: string, n = 60) => (s.length > n ? s.slice(0, n - 1) + '‚Ä¶' : s);

  // Ordem das categorias STRIDE
  const categoryOrder = [
    'Spoofing', 'Tampering', 'Repudiation', 
    'Information Disclosure', 'Denial of Service', 'Elevation of Privilege'
  ];

  // Agrupa amea√ßas por categoria
  const byCategory: Record<string, IdentifiedThreat[]> = {};
  for (const th of threats) {
    const cat = String((th.strideCategory as string) || 'Other');
    (byCategory[cat] ||= []).push(th);
  }

  // Ordena categorias
  const catKeys = Object.keys(byCategory).sort((a, b) => {
    const ia = categoryOrder.indexOf(a);
    const ib = categoryOrder.indexOf(b);
    if (ia === -1 && ib === -1) return a.localeCompare(b);
    if (ia === -1) return 1;
    if (ib === -1) return -1;
    return ia - ib;
  });

  // Constr√≥i o diagrama com layout mais vertical
  const lines: string[] = [];
  lines.push('flowchart TD');
  lines.push(`  ROOT[${safeLabel(truncate(rootTitle, 50))}]`);
  lines.push('  %% Configura√ß√µes de layout para melhor visualiza√ß√£o');
  lines.push('  classDef rootClass fill:#e1f5fe,stroke:#01579b,stroke-width:3px');
  lines.push('  classDef categoryClass fill:#fff3e0,stroke:#e65100,stroke-width:2px');
  lines.push('  classDef elementClass fill:#f3e5f5,stroke:#4a148c,stroke-width:1px');
  lines.push('  classDef capecClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:1px');
  lines.push('  classDef scenarioClass fill:#fff8e1,stroke:#f57f17,stroke-width:1px');
  lines.push('  class ROOT rootClass');

  // Layout em colunas para melhor visualiza√ß√£o
  catKeys.forEach((cat, catIdx) => {
    const catId = `CAT${catIdx}`;
    const catLabel = safeLabel(cat);
    
    lines.push(`  subgraph ${catId}[${catLabel}]`);
    lines.push(`    class ${catId} categoryClass`);
    
          byCategory[cat].forEach((th, i) => {
        const elId = `${catId}_E${i}`;
        const cId = `${catId}_C${i}`;
        const sId = `${catId}_S${i}`;
        
        const element = wrapText(safeLabel(th.elementName || 'Elemento'), 20);
        const capec = wrapText(safeLabel(
          th.capecId && th.capecName ? `${th.capecId}: ${th.capecName}` : (th.capecId || th.capecName || 'CAPEC')
        ), 25);
        const scenario = wrapText(safeLabel(th.threatScenario || 'Cen√°rio'), 30);
        
        lines.push(`    ${elId}[${element}]`);
        lines.push(`    ${cId}[${capec}]`);
        lines.push(`    ${sId}[${scenario}]`);
        lines.push(`    class ${elId} elementClass`);
        lines.push(`    class ${cId} capecClass`);
        lines.push(`    class ${sId} scenarioClass`);
        
        // Conex√µes verticais mais claras
        lines.push(`    ${elId} --> ${cId}`);
        lines.push(`    ${cId} --> ${sId}`);
      });
    
    lines.push('  end');
    lines.push(`  ROOT --> ${catId}`);
  });

  return lines.join('\n');
}

export const refineAnalysis = async (
  systemInfo: SystemInfo,
  currentReportMarkdown: string,
  strideCapecMap: StrideCapecMapType
): Promise<{ threats: IdentifiedThreat[] }> => {
  if (!ai) throw new Error("Chave da API Gemini n√£o configurada.");

  // Calcular complexidade da tarefa de refinamento
  const complexity = calculateTaskComplexity(systemInfo, currentReportMarkdown);
  console.log(`[Gemini Service] Complexidade do refinamento detectada: ${complexity}`);

  const prompt = `
Contexto: Voc√™ √© um especialista s√™nior em seguran√ßa cibern√©tica revisando e refinando um relat√≥rio de modelagem de amea√ßas existente. O usu√°rio forneceu uma vers√£o inicial do relat√≥rio (em Markdown) que pode ter sido editada.

Informa√ß√µes Originais do Sistema (para refer√™ncia):
${JSON.stringify(systemInfo, null, 2)}

Mapeamento STRIDE para CAPEC (para refer√™ncia ao adicionar novas amea√ßas):
${JSON.stringify(strideCapecMap, null, 2)}

Relat√≥rio Atual (Markdown) para Refinar:
---
${currentReportMarkdown}
---

Tarefa (Responda em Portugu√™s do Brasil):
Sua tarefa √© refinar o relat√≥rio de modelagem de amea√ßas fornecido. Analise o conte√∫do do Markdown, incluindo a descri√ß√£o do sistema e as amea√ßas.

1.  **Refinar a An√°lise de Amea√ßas:**
    *   Revise a lista de amea√ßas existente no contexto do relat√≥rio.
    *   Mantenha as amea√ßas que ainda s√£o v√°lidas.
    *   Corrija quaisquer imprecis√µes nas amea√ßas existentes (cen√°rios, mapeamentos CAPEC, etc.).
    *   Adicione **novas amea√ßas** que voc√™ identificar com base em sua experi√™ncia e no relat√≥rio atualizado. Garanta uma cobertura STRIDE abrangente.
    *   Remova amea√ßas que n√£o s√£o mais relevantes devido √†s mudan√ßas.

2.  **Gerar Sa√≠da Estruturada:**
    - Com base em sua an√°lise refinada, gere um objeto JSON contendo uma chave chamada 'threats', que deve ser um array JSON de objetos de amea√ßas, seguindo a mesma estrutura da an√°lise original. Este array deve ser a lista completa e refinada de amea√ßas.

IMPORTANTE - IDIOMA:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- APENAS as categorias STRIDE devem permanecer em ingl√™s (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege)
- Nomes CAPEC podem permanecer em ingl√™s, MAS suas descri√ß√µes devem ser em portugu√™s
- Classifica√ß√µes OWASP TOP 10 podem permanecer em ingl√™s, mas qualquer texto explicativo deve ser em portugu√™s
- Cen√°rios de amea√ßa, descri√ß√µes CAPEC e recomenda√ß√µes de mitiga√ß√£o DEVEM SER ESCRITOS EM PORTUGU√äS DO BRASIL
- REPITO: ESCREVA EM PORTUGU√äS DO BRASIL - apenas categorias STRIDE em ingl√™s!

Estrutura do Objeto de Amea√ßa (mantenha as chaves em ingl√™s):
{
  "elementName": "string",
  "strideCategory": "string",
  "threatScenario": "string",
  "capecId": "string",
  "capecName": "string",
  "capecDescription": "string",
  "mitigationRecommendations": "string",
  "impact": "string (CRITICAL, HIGH, MEDIUM ou LOW)",
  "owaspTop10": "string (ex: 'A01:2021 - Broken Access Control')"
}

Sa√≠da:
Retorne APENAS o objeto JSON principal. N√£o inclua nenhum outro texto, explica√ß√µes ou formata√ß√£o markdown como 'tr√™s crases' ou 'formata√ß√£o markdown de c√≥digo'.

Exemplo de Sa√≠da JSON:
{
  "threats": [
    {
      "elementName": "Frontend(App Web Refinado)",
      "strideCategory": "Information Disclosure",
      "threatScenario": "Um invasor explora uma vulnerabilidade de Cross-Site Scripting (XSS) para roubar tokens de sess√£o armazenados no navegador do usu√°rio.",
      "capecId": "CAPEC-591",
      "capecName": "Stored XSS",
      "capecDescription": "O invasor tenta injetar script malicioso que √© armazenado no servidor e servido a outros usu√°rios, comprometendo suas sess√µes.",
      "mitigationRecommendations": "Implementar uma Pol√≠tica de Seguran√ßa de Conte√∫do (CSP) forte. Validar e sanitizar todas as entradas do usu√°rio no lado do servidor e do cliente. Usar codifica√ß√£o de sa√≠da apropriada.",
      "impact": "HIGH",
      "owaspTop10": "A03:2021 - Injection"
    }
    // ... outras amea√ßas refinadas
  ]
}
`;

  const response = await executeWithIntelligentRetry(prompt, 'REFINEMENT', complexity);
  const parsedResponse = parseJsonFromText(response.text);

  if (!parsedResponse || !Array.isArray(parsedResponse.threats)) {
    console.error("A resposta da IA para refinamento n√£o continha 'threats':", parsedResponse);
    throw new Error("A resposta da IA para refinamento estava malformada.");
  }

  const threatsWithIds = parsedResponse.threats.map((threat: any, index: number) => ({
    ...threat,
    id: `threat-${index}-${Date.now()}`,
  }));

  return { threats: threatsWithIds };
};

/**
 * Usa a IA Gemini para resumir e formatar a descri√ß√£o geral do sistema a partir de um texto livre.
 * @param fullDescription Texto livre informado pelo usu√°rio sobre o sistema.
 * @returns Promise<Partial<SystemInfo>> com a descri√ß√£o geral resumida e formatada.
 */
export const summarizeSystemDescription = async (fullDescription: string): Promise<Partial<SystemInfo>> => {
  if (!ai) throw new Error("Chave da API Gemini n√£o configurada.");
  if (!fullDescription) throw new Error("Descri√ß√£o do sistema n√£o informada.");
  
  // Para resumos, sempre usar complexidade simples
  const complexity = 'SIMPLE' as const;
  console.log(`[Gemini Service] Executando resumo do sistema com complexidade: ${complexity}`);
  
  const prompt = `
Voc√™ √© um assistente de seguran√ßa da informa√ß√£o especializado em an√°lise de sistemas. 

Leia a descri√ß√£o completa do sistema abaixo e extraia/resuma de forma clara e objetiva os seguintes campos:

1. **generalDescription**: Resuma o objetivo e funcionamento geral do sistema em at√© 5-6 linhas, destacando os aspectos principais.

2. **components**: Liste os principais componentes/m√≥dulos do sistema de forma organizada (ex: frontend, backend, bancos de dados, servi√ßos).

3. **sensitiveData**: Liste os tipos de dados sens√≠veis tratados pelo sistema (ex: dados pessoais, dados de sa√∫de, financeiros, credenciais).

4. **technologies**: Liste as principais tecnologias, frameworks, linguagens e ferramentas utilizadas.

5. **authentication**: Descreva os mecanismos de autentica√ß√£o e autoriza√ß√£o implementados no sistema.

6. **userProfiles**: Liste os perfis/tipos de usu√°rio que interagem com o sistema.

7. **externalIntegrations**: Liste as integra√ß√µes externas, APIs de terceiros e sistemas conectados.

INSTRU√á√ïES IMPORTANTES:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- Seja conciso mas informativo
- Se a descri√ß√£o n√£o mencionar explicitamente algum campo, tente inferir a partir do contexto
- Se realmente n√£o houver informa√ß√£o dispon√≠vel, use "N√£o informado" ou "N√£o especificado"
- Mantenha formata√ß√£o clara com quebras de linha quando apropriado
- ESCREVA TUDO EM PORTUGU√äS DO BRASIL

Responda APENAS com um objeto JSON com as chaves exatamente como especificado, sem explica√ß√µes ou texto extra fora do JSON.

Descri√ß√£o completa do sistema:
"""
${fullDescription}
"""

Sa√≠da esperada (exemplo de estrutura):
{
  "generalDescription": "Sistema de gest√£o...",
  "components": "Frontend: React, Angular\nBackend: Node.js, Python\nBanco de Dados: MySQL, MongoDB",
  "sensitiveData": "Dados pessoais (CPF, nome, endere√ßo)\nDados de sa√∫de (prescri√ß√µes)\nDados financeiros",
  "technologies": "Node.js, Python, MySQL, Redis, Docker",
  "authentication": "JWT, OAuth 2.0, Certifica√ß√£o Digital ICP-Brasil",
  "userProfiles": "Administrador, Farmac√™utico, Cliente, Gerente",
  "externalIntegrations": "ANVISA (SNGPC), Operadoras de Sa√∫de, APIs de Delivery"
}
`;

  const response = await executeWithIntelligentRetry(prompt, 'SUMMARY', complexity);
  const result = parseJsonFromText(response.text);
  
  // Garantir que todos os campos existam
  return {
    generalDescription: result.generalDescription || "N√£o informado",
    components: result.components || "N√£o informado",
    sensitiveData: result.sensitiveData || "N√£o informado",
    technologies: result.technologies || "N√£o informado",
    authentication: result.authentication || "N√£o informado",
    userProfiles: result.userProfiles || "N√£o informado",
    externalIntegrations: result.externalIntegrations || "N√£o informado"
  };
};