import { SystemInfo, IdentifiedThreat, StrideCapecMapType } from '../types';

// Configura√ß√£o para an√°lise de complexidade
const COMPLEXITY_THRESHOLDS = {
  SIMPLE_TASK_TOKENS: 5000,        // < 5k tokens = tarefa simples
  COMPLEX_TASK_TOKENS: 50000,      // > 50k tokens = tarefa complexa
};

// Fun√ß√£o para calcular complexidade aproximada da tarefa
const calculateTaskComplexity = (
  systemInfo: SystemInfo, 
  additionalData?: string
): 'SIMPLE' | 'MEDIUM' | 'COMPLEX' => {
  const systemInfoStr = JSON.stringify(systemInfo);
  const totalLength = systemInfoStr.length + (additionalData?.length || 0);
  
  // Fatores de complexidade
  const componentCount = systemInfo.components?.split(',').length || 0;
  const hasExternalIntegrations = systemInfo.externalIntegrations && 
    systemInfo.externalIntegrations.toLowerCase() !== 'n√£o informado';
  const hasComplexAuth = systemInfo.authentication && 
    systemInfo.authentication.toLowerCase().includes('oauth');
  
  // C√°lculo de pontua√ß√£o de complexidade
  let complexityScore = 0;
  
  // Tamanho do conte√∫do
  if (totalLength > COMPLEXITY_THRESHOLDS.COMPLEX_TASK_TOKENS) complexityScore += 3;
  else if (totalLength > COMPLEXITY_THRESHOLDS.SIMPLE_TASK_TOKENS) complexityScore += 1;
  
  // N√∫mero de componentes
  if (componentCount > 10) complexityScore += 2;
  else if (componentCount > 5) complexityScore += 1;
  
  // Integra√ß√µes externas
  if (hasExternalIntegrations) complexityScore += 1;
  
  // Autentica√ß√£o complexa
  if (hasComplexAuth) complexityScore += 1;
  
  // Classifica√ß√£o final
  if (complexityScore >= 5) return 'COMPLEX';
  if (complexityScore >= 2) return 'MEDIUM';
  return 'SIMPLE';
};

// Contexto simples para sinalizar tipo de tarefa atual
const currentGenerationContext: { currentTask: 'DEFAULT' | 'ATTACK_TREE' } = { currentTask: 'DEFAULT' };

const parseJsonFromText = (text: string | undefined): any => {
  if (!text) throw new Error("Texto da resposta da IA est√° indefinido.");
  let jsonStr = text.trim();
  const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s; // Matches ```json ... ``` or ``` ... ```
  const match = jsonStr.match(fenceRegex);
  if (match && match[2]) {
    jsonStr = match[2].trim();
  }
  try {
    return JSON.parse(jsonStr);
  } catch (e) {
    console.error("Falha ao analisar resposta JSON:", e, "Texto original:", jsonStr);
    throw new Error(`Falha ao analisar resposta da IA como JSON. Conte√∫do: ${jsonStr.substring(0,500)}...`);
  }
};

// Fun√ß√£o para buscar contexto RAG relevante com m√∫ltiplas queries espec√≠ficas
const searchRAGContext = async (systemInfo: SystemInfo, modelConfig?: any): Promise<any | null> => {
  try {
    const BACKEND_URL = 'http://localhost:3001';
    
    // Construir m√∫ltiplas queries espec√≠ficas baseadas nas caracter√≠sticas do sistema
    // Cada query foca em um aspecto diferente para capturar documentos relevantes
    const searchQueries: Array<{ query: string; aspect: string }> = [];
    
    // 1. Query sobre o nome e objetivo do sistema
    if (systemInfo.systemName && systemInfo.systemName.trim()) {
      searchQueries.push({
        query: `${systemInfo.systemName} sistema objetivo funcionalidade prop√≥sito`,
        aspect: 'Nome e Objetivo do Sistema'
      });
    }
    
    // 2. Query sobre componentes chave e arquitetura
    if (systemInfo.components && systemInfo.components.trim()) {
      searchQueries.push({
        query: `componentes arquitetura ${systemInfo.components} ${systemInfo.systemName}`,
        aspect: 'Componentes Chave'
      });
    }
    
    // 3. Query sobre dados cr√≠ticos e sens√≠veis
    if (systemInfo.sensitiveData && systemInfo.sensitiveData.trim()) {
      searchQueries.push({
        query: `dados sens√≠veis confidenciais ${systemInfo.sensitiveData} prote√ß√£o seguran√ßa`,
        aspect: 'Dados Cr√≠ticos'
      });
    }
    
    // 4. Query sobre tecnologias e infraestrutura
    if (systemInfo.technologies && systemInfo.technologies.trim()) {
      searchQueries.push({
        query: `tecnologias stack infraestrutura ${systemInfo.technologies} vulnerabilidades`,
        aspect: 'Tecnologias e Infraestrutura'
      });
    }
    
    // 5. Query sobre autentica√ß√£o e controle de acesso
    if (systemInfo.authentication && systemInfo.authentication.trim()) {
      searchQueries.push({
        query: `autentica√ß√£o autoriza√ß√£o ${systemInfo.authentication} controle acesso seguran√ßa`,
        aspect: 'Autentica√ß√£o'
      });
    }
    
    // 6. Query sobre perfis de usu√°rio e fluxos
    if (systemInfo.userProfiles && systemInfo.userProfiles.trim()) {
      searchQueries.push({
        query: `usu√°rios perfis fluxos processos ${systemInfo.userProfiles} intera√ß√µes`,
        aspect: 'Fluxos de Usu√°rio'
      });
    }
    
    // 7. Query sobre integra√ß√µes externas
    if (systemInfo.externalIntegrations && systemInfo.externalIntegrations.trim()) {
      searchQueries.push({
        query: `integra√ß√µes externas APIs ${systemInfo.externalIntegrations} comunica√ß√£o`,
        aspect: 'Integra√ß√µes Externas'
      });
    }
    
    // 8. Query geral baseada na descri√ß√£o completa do sistema
    if (systemInfo.generalDescription && systemInfo.generalDescription.trim()) {
      const descriptionWords = systemInfo.generalDescription
        .split(/\s+/)
        .slice(0, 50) // Primeiras 50 palavras
        .join(' ');
      searchQueries.push({
        query: `threat modeling STRIDE ${descriptionWords}`,
        aspect: 'Descri√ß√£o Geral'
      });
    }
    
    // Fallback se nenhuma query espec√≠fica foi criada
    if (searchQueries.length === 0) {
      searchQueries.push({
        query: 'threat modeling security analysis STRIDE vulnerabilities',
        aspect: 'An√°lise Geral de Amea√ßas'
      });
    }
    
    console.log(`üîç Realizando busca RAG com ${searchQueries.length} queries espec√≠ficas para diferentes aspectos do sistema "${systemInfo.systemName}"`);
    
    // Realizar m√∫ltiplas buscas em paralelo
    const searchPromises = searchQueries.map(async ({ query, aspect }, index) => {
      console.log(`  ${index + 1}. Buscando: "${aspect}" - Query: "${query.substring(0, 60)}..."`);
      
      try {
        const response = await fetch(`${BACKEND_URL}/api/search/context`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            query, 
            limit: 3, // Menos resultados por query, mas mais queries
            systemContext: systemInfo.systemName,
            modelConfig: modelConfig
          })
        });
        
        if (!response.ok) {
          console.warn(`  ‚ö†Ô∏è Busca falhou para aspecto "${aspect}"`);
          return null;
        }
        
        const context = await response.json();
        console.log(`  ‚úì ${aspect}: ${context.sources?.length || 0} fontes encontradas`);
        
        return {
          aspect,
          context: context.context || '',
          sources: context.sources || [],
          confidence: context.confidence || 0
        };
      } catch (error) {
        console.warn(`  ‚ö†Ô∏è Erro na busca para "${aspect}":`, error);
        return null;
      }
    });
    
    // Aguardar todas as buscas
    const results = await Promise.all(searchPromises);
    const validResults = results.filter(r => r !== null && r.sources.length > 0);
    
    if (validResults.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum contexto RAG encontrado em nenhuma das buscas');
      return null;
    }
    
    // Combinar resultados de todas as buscas
    const allSources: any[] = [];
    const seenSourceIds = new Set<string>();
    
    validResults.forEach(result => {
      result.sources.forEach((source: any) => {
        const sourceId = `${source.documento.metadata.documentId}-${source.documento.metadata.chunkIndex}`;
        if (!seenSourceIds.has(sourceId)) {
          seenSourceIds.add(sourceId);
          allSources.push({
            ...source,
            searchAspect: result.aspect // Adicionar informa√ß√£o sobre qual aspecto encontrou este chunk
          });
        }
      });
    });
    
    // Ordenar por score (relev√¢ncia)
    allSources.sort((a, b) => b.score - a.score);
    
    // Limitar a um n√∫mero razo√°vel de fontes (top 15)
    const topSources = allSources.slice(0, 15);
    
    // Combinar contextos
    const combinedContext = validResults
      .map(result => `\n## ${result.aspect}\n${result.context}`)
      .join('\n\n---\n');
    
    // Calcular confian√ßa m√©dia ponderada
    const avgConfidence = validResults.reduce((sum, r) => sum + r.confidence, 0) / validResults.length;
    
    console.log(`\n‚úÖ Busca RAG conclu√≠da:`);
    console.log(`   - ${validResults.length} aspectos com resultados`);
    console.log(`   - ${topSources.length} fontes √∫nicas encontradas`);
    const confidenceDisplay = (!isNaN(avgConfidence) && avgConfidence != null) ? avgConfidence.toFixed(1) : '0.0';
    console.log(`   - Confian√ßa m√©dia: ${confidenceDisplay}%`);
    
    // Agrupar por documento para logging
    const docGroups = new Map<string, number>();
    topSources.forEach(source => {
      const docName = source.documento.metadata.documentName || 'Desconhecido';
      docGroups.set(docName, (docGroups.get(docName) || 0) + 1);
    });
    
    console.log(`\nüìö Documentos utilizados:`);
    docGroups.forEach((count, docName) => {
      console.log(`   - ${docName}: ${count} chunks`);
    });
    
    return {
      context: combinedContext,
      sources: topSources,
      totalDocuments: docGroups.size,
      confidence: avgConfidence,
      aspectsCovered: validResults.map(r => r.aspect)
    };
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao buscar contexto RAG, continuando sem contexto:', error);
    return null;
  }
};

export const analyzeThreatsAndMitigations = async (
  systemInfo: SystemInfo,
  strideCapecMap: StrideCapecMapType,
  modelConfig?: any
): Promise<IdentifiedThreat[]> => {
  // Usar endpoint do backend para gera√ß√£o de conte√∫do
  
  // Buscar contexto RAG relevante
  const ragContext = await searchRAGContext(systemInfo, modelConfig);
  
  // Calcular complexidade da tarefa
  const complexity = calculateTaskComplexity(systemInfo, JSON.stringify(strideCapecMap));
  console.log(`[AI Service] Complexidade da an√°lise detectada: ${complexity}`);
  
  // Construir contexto RAG para o prompt
  const ragContextSection = ragContext ? `

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CONTEXTO ADICIONAL DE CONHECIMENTO (RAG) - BUSCA SEM√ÇNTICA
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä ESTAT√çSTICAS DA BUSCA:
- Total de fontes encontradas: ${ragContext.sources.length}
- Documentos √∫nicos consultados: ${ragContext.totalDocuments}
- Confian√ßa m√©dia da busca: ${(!isNaN(ragContext.confidence) && ragContext.confidence != null) ? ragContext.confidence.toFixed(1) : '0.0'}%

üéØ ASPECTOS DO SISTEMA COBERTOS PELA BUSCA:
${ragContext.aspectsCovered ? ragContext.aspectsCovered.map((aspect: string, i: number) => `${i + 1}. ${aspect}`).join('\n') : 'N/A'}

üìö DOCUMENTOS E CHUNKS UTILIZADOS:
${(ragContext.sources as any[]).map((source: any, index: number) => {
  const docName = source.documento.metadata.documentName || 'Documento';
  const aspect = source.searchAspect || 'Geral';
  const chunkIndex = source.documento.metadata.chunkIndex || 0;
  const score = (source.score != null && !isNaN(source.score)) ? source.score.toFixed(3) : 'N/A';
  return `${index + 1}. ${docName} (Chunk #${chunkIndex}, Score: ${score}) - Aspecto: ${aspect}`;
}).join('\n')}

üìñ CONTE√öDO RELEVANTE ENCONTRADO:
${ragContext.context}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã INSTRU√á√ïES PARA USO DO CONTEXTO RAG:
‚úì Use as informa√ß√µes do contexto acima para enriquecer sua an√°lise de amea√ßas
‚úì D√™ aten√ß√£o especial aos aspectos espec√≠ficos do sistema que foram encontrados
‚úì Referencie pr√°ticas, vulnerabilidades e padr√µes mencionados no contexto quando relevantes
‚úì Adapte as mitiga√ß√µes sugeridas com base no conhecimento contextual espec√≠fico do sistema
‚úì Priorize amea√ßas relacionadas aos componentes, tecnologias e dados mencionados no contexto
‚úì Mantenha consist√™ncia com as melhores pr√°ticas identificadas no contexto
‚úì Se o contexto mencionar vulnerabilidades espec√≠ficas das tecnologias usadas, inclua-as na an√°lise

` : `

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ö†Ô∏è  NOTA: Nenhum contexto RAG adicional dispon√≠vel
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

O sistema de busca sem√¢ntica n√£o encontrou documentos espec√≠ficos sobre este sistema
na base de conhecimento. A an√°lise ser√° baseada apenas no conhecimento interno da IA
e no mapeamento STRIDE-CAPEC fornecido.

Recomenda√ß√£o: Para an√°lises mais precisas, considere fazer upload de documenta√ß√£o
t√©cnica, especifica√ß√µes de seguran√ßa ou an√°lises anteriores relacionadas a este sistema.

`;
  
  const prompt = `${ragContextSection}
Informa√ß√µes do Sistema (em Portugu√™s):
${JSON.stringify(systemInfo, null, 2)}

Mapeamento STRIDE para CAPEC (use estes CAPECs como sugest√µes para a categoria STRIDE relevante):
${JSON.stringify(strideCapecMap, null, 2)}

Tarefa (Responda em Portugu√™s do Brasil):
Analise as informa√ß√µes do sistema fornecidas. Para cada componente e fluxo de dados significativo identificado, realize uma an√°lise de amea√ßas STRIDE.
Para cada amea√ßa identificada:
1. Especifique o elemento do sistema (nome do componente ou descri√ß√£o do fluxo).
2. Identifique a categoria STRIDE (use apenas o termo em ingl√™s: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege).
3. Descreva um cen√°rio de amea√ßa conciso e espec√≠fico para este elemento e categoria STRIDE (em Portugu√™s).
4. Selecione o ID e Nome CAPEC mais relevante do Mapeamento STRIDE para CAPEC fornecido para a categoria STRIDE identificada. Se m√∫ltiplos forem relevantes, escolha o principal. (Nomes CAPEC podem permanecer em Ingl√™s).
5. Forne√ßa uma breve descri√ß√£o do padr√£o de ataque CAPEC selecionado, adaptada ao cen√°rio (em Portugu√™s).
6. Sugira recomenda√ß√µes de mitiga√ß√£o pr√°ticas e acion√°veis (2-3 pontos chave, em Portugu√™s).
7. Avalie o impacto potencial da amea√ßa, classificando como CRITICAL, HIGH, MEDIUM ou LOW, considerando o poss√≠vel dano ao neg√≥cio, usu√°rios ou dados.
8. Relacione a amea√ßa ao item mais relevante do OWASP TOP 10 (ex: "A01:2021 - Broken Access Control").

IMPORTANTE - IDIOMA:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- APENAS as categorias STRIDE devem permanecer em ingl√™s (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege)
- Nomes CAPEC podem permanecer em ingl√™s, MAS suas descri√ß√µes devem ser em portugu√™s
- Classifica√ß√µes OWASP TOP 10 podem permanecer em ingl√™s, mas qualquer texto explicativo deve ser em portugu√™s
- Cen√°rios de amea√ßa, descri√ß√µes CAPEC e recomenda√ß√µes de mitiga√ß√£o DEVEM SER ESCRITOS EM PORTUGU√äS DO BRASIL

Sa√≠da:
Retorne o resultado como um array JSON de objetos. Cada objeto deve seguir esta estrutura exata (mantenha as chaves do JSON em ingl√™s):
{
  "elementName": "string (nome do componente/fluxo como definido)",
  "strideCategory": "string (ex: 'Spoofing')",
  "threatScenario": "string (em Portugu√™s)",
  "capecId": "string (ex: 'CAPEC-113')",
  "capecName": "string (ex: 'Session Hijacking')",
  "capecDescription": "string (descri√ß√£o do ataque CAPEC, em Portugu√™s)",
  "mitigationRecommendations": "string (passos de mitiga√ß√£o acion√°veis, em Portugu√™s)",
  "impact": "string (CRITICAL, HIGH, MEDIUM ou LOW)",
  "owaspTop10": "string (ex: 'A01:2021 - Broken Access Control')"
}

Importante:
- Assegure que a sa√≠da seja APENAS o array JSON. N√£o inclua nenhum outro texto, explica√ß√µes ou formata√ß√£o markdown como 'tr√™s crases' ou 'formata√ß√£o markdown de c√≥digo' fora do pr√≥prio array JSON.
- Forne√ßa pelo menos 5-10 amea√ßas cobrindo diferentes componentes/fluxos e categorias STRIDE.
- TODO O CONTE√öDO DE TEXTO DENTRO DOS VALORES JSON (COMO threatScenario, capecDescription, mitigationRecommendations) DEVE ESTAR EM PORTUGU√äS DO BRASIL.
- REPITO: ESCREVA EM PORTUGU√äS DO BRASIL - apenas categorias STRIDE em ingl√™s!

Exemplo (Ilustrativo - adapte aos elementos reais do sistema e use o mapeamento fornecido):
[
  {
    "elementName": "API de Autentica√ß√£o de Usu√°rio",
    "strideCategory": "Spoofing",
    "threatScenario": "Um invasor tenta se passar por um usu√°rio leg√≠timo enviando credenciais roubadas para o endpoint de login.",
    "capecId": "CAPEC-15",
    "capecName": "Credentials Dowsing",
    "capecDescription": "O invasor tenta sistematicamente adivinhar ou descobrir credenciais de login v√°lidas atrav√©s de v√°rios m√©todos como for√ßa bruta ou phishing.",
    "mitigationRecommendations": "Implementar Autentica√ß√£o Multi-Fator (MFA). Aplicar pol√≠ticas de senha forte e mecanismos de bloqueio de conta. Monitorar tentativas de login suspeitas.",
    "impact": "HIGH",
    "owaspTop10": "A07:2021 - Identification and Authentication Failures"
  }
]
`;
  
  // Usar endpoint do backend para gera√ß√£o de conte√∫do
  const backendResponse = await fetch('http://localhost:3001/api/generate-content', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      prompt,
      modelConfig
    })
  });

  if (!backendResponse.ok) {
    throw new Error(`Erro na gera√ß√£o de conte√∫do: ${backendResponse.statusText}`);
  }

  const result = await backendResponse.json();
  const response = result.content;
  const parsedThreatsData = parseJsonFromText(response.response.text());

  if (!Array.isArray(parsedThreatsData)) {
    console.error("Resposta da IA para amea√ßas n√£o foi um array:", parsedThreatsData);
    throw new Error("A resposta da IA para amea√ßas n√£o estava no formato de array esperado.");
  }

  return parsedThreatsData.map((threat: any, index: number) => ({
    ...threat,
    id: `threat-${index}-${Date.now()}`,
    elementName: threat.elementName || "N/D",
    strideCategory: threat.strideCategory || "N/D",
    threatScenario: threat.threatScenario || "N/D",
    capecId: threat.capecId || "N/D",
    capecName: threat.capecName || "N/D",
    capecDescription: threat.capecDescription || "N/D",
    mitigationRecommendations: threat.mitigationRecommendations || "N/D",
    impact: threat.impact || "N/D",
    owaspTop10: threat.owaspTop10 || "N/D",
  }));
};

/**
 * Gera uma √°rvore de ataque em Mermaid (graph TD ou mindmap) a partir das amea√ßas identificadas.
 * Retorna apenas o texto Mermaid v√°lido.
 */
export const generateAttackTreeMermaid = async (
  threats: IdentifiedThreat[],
  modelConfig?: any
): Promise<string> => {
  const complexity = calculateTaskComplexity({ generalDescription: JSON.stringify(threats) }, "");

  try {
    // Prompt melhorado baseado na abordagem Python
    const prompt = `
Voc√™ √© um especialista em modelagem de amea√ßas. Analise as amea√ßas fornecidas e crie uma √Årvore de Ataque estruturada.

Amea√ßas Identificadas:
${JSON.stringify(threats, null, 2)}

Tarefa: Crie uma √°rvore de ataque em formato Mermaid flowchart que organize as amea√ßas por categoria STRIDE.

Regras IMPORTANTES:
- Use APENAS "flowchart TD" como cabe√ßalho
- Organize em subgraphs por categoria STRIDE
- Para cada amea√ßa, crie: Elemento ‚Üí CAPEC ‚Üí Cen√°rio
- Use IDs √∫nicos e simples (ex: S1, S2, T1, T2)
- Evite caracteres especiais nos r√≥tulos
- Mantenha r√≥tulos curtos mas descritivos
- N√ÉO use mindmap ou sintaxes espec√≠ficas de outros diagramas

Exemplo de estrutura esperada:
flowchart TD
  ROOT["Ataques ao Sistema"]
  subgraph S[Spoofing]
    S1[Elemento A] --> S1C[CAPEC-xxx: Nome]
    S1C --> S1S[Cen√°rio curto]
  end
  subgraph T[Tampering]
    T1[Elemento B] --> T1C[CAPEC-yyy: Nome]
    T1C --> T1S[Cen√°rio curto]
  end
  ROOT --> S
  ROOT --> T

Retorne APENAS o c√≥digo Mermaid, sem explica√ß√µes ou markdown.`;

    // Usar endpoint do backend para gera√ß√£o de conte√∫do
    const backendResponse = await fetch('http://localhost:3001/api/generate-content', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt,
        modelConfig
      })
    });

    if (!backendResponse.ok) {
      throw new Error(`Erro na gera√ß√£o de conte√∫do: ${backendResponse.statusText}`);
    }

    const result = await backendResponse.json();
    const response = result.content;
    let text = response.response.text().trim();
    
    // Valida√ß√£o e limpeza robusta
    if (!/^(flowchart|graph)\s+(TD|LR|BT|RL)/i.test(text) || /^mindmap/i.test(text)) {
      return buildFlowchartFromThreats(threats);
    }

    // Sanitiza√ß√£o avan√ßada baseada na abordagem Python
    text = sanitizeMermaidText(text);
    
    // Valida√ß√£o final
    if (isValidMermaidFlowchart(text)) {
      return text;
    }
    
    return buildFlowchartFromThreats(threats);
  } catch (e) {
    console.debug('IA retornou diagrama n√£o padronizado, usando fallback.');
  }

  return buildFlowchartFromThreats(threats);
}

// Fun√ß√£o de sanitiza√ß√£o robusta baseada na abordagem Python
function sanitizeMermaidText(text: string): string {
  // Remove markdown code blocks
  text = text.replace(/^```\w*\n?|```$/g, '').trim();
  
  // Normaliza aspas e colchetes
  text = text.replace(/\[\"/g, '[').replace(/\"\]/g, ']').replace(/\"/g, "'");
  
  // Remove caracteres problem√°ticos para Mermaid
  text = text.replace(/[\/\\|{}()<>]/g, ' ');
  
  // Normaliza espa√ßos m√∫ltiplos
  text = text.replace(/\s+/g, ' ');
  
  // Remove linhas vazias extras
  text = text.replace(/\n\s*\n/g, '\n');
  
  return text.trim();
}

// Valida√ß√£o de estrutura Mermaid v√°lida
function isValidMermaidFlowchart(text: string): boolean {
  const lines = text.split('\n');
  const hasValidHeader = /^(flowchart|graph)\s+(TD|LR|BT|RL)/i.test(lines[0] || '');
  const hasNodes = lines.some(line => /\w+\[.*\]/.test(line));
  const hasConnections = lines.some(line => /\w+\s*-->\s*\w+/.test(line));
  
  return hasValidHeader && hasNodes && hasConnections;
}

// Fun√ß√£o de fallback melhorada baseada na estrutura JSON Python
function buildFlowchartFromThreats(threats: IdentifiedThreat[]): string {
  const rootTitle = `Ataques ao Sistema`;
  
  // Fun√ß√µes de sanitiza√ß√£o
  const normalize = (s: string) => (s || 'N/D').replace(/\s+/g, ' ').trim();
  const safeLabel = (s: string) => normalize(s)
    .replace(/[\/\\|{}()<>\[\]"]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
  
  // Fun√ß√£o para quebrar linhas longas
  const wrapText = (text: string, maxWidth: number = 25): string => {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';
    
    for (const word of words) {
      if ((currentLine + ' ' + word).length <= maxWidth) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    }
    if (currentLine) lines.push(currentLine);
    
    return lines.join('<br/>');
  };
  
  const truncate = (s: string, n = 60) => (s.length > n ? s.slice(0, n - 1) + '‚Ä¶' : s);

  // Ordem das categorias STRIDE
  const categoryOrder = [
    'Spoofing', 'Tampering', 'Repudiation', 
    'Information Disclosure', 'Denial of Service', 'Elevation of Privilege'
  ];

  // Agrupa amea√ßas por categoria
  const byCategory: Record<string, IdentifiedThreat[]> = {};
  for (const th of threats) {
    const cat = String((th.strideCategory as string) || 'Other');
    (byCategory[cat] ||= []).push(th);
  }

  // Ordena categorias
  const catKeys = Object.keys(byCategory).sort((a, b) => {
    const ia = categoryOrder.indexOf(a);
    const ib = categoryOrder.indexOf(b);
    if (ia === -1 && ib === -1) return a.localeCompare(b);
    if (ia === -1) return 1;
    if (ib === -1) return -1;
    return ia - ib;
  });

  // Constr√≥i o diagrama com layout mais vertical
  const lines: string[] = [];
  lines.push('flowchart TD');
  lines.push(`  ROOT[${safeLabel(truncate(rootTitle, 50))}]`);
  lines.push('  %% Configura√ß√µes de layout para melhor visualiza√ß√£o');
  lines.push('  classDef rootClass fill:#e1f5fe,stroke:#01579b,stroke-width:3px');
  lines.push('  classDef categoryClass fill:#fff3e0,stroke:#e65100,stroke-width:2px');
  lines.push('  classDef elementClass fill:#f3e5f5,stroke:#4a148c,stroke-width:1px');
  lines.push('  classDef capecClass fill:#e8f5e8,stroke:#1b5e20,stroke-width:1px');
  lines.push('  classDef scenarioClass fill:#fff8e1,stroke:#f57f17,stroke-width:1px');
  lines.push('  class ROOT rootClass');

  // Layout em colunas para melhor visualiza√ß√£o
  catKeys.forEach((cat, catIdx) => {
    const catId = `CAT${catIdx}`;
    const catLabel = safeLabel(cat);
    
    lines.push(`  subgraph ${catId}[${catLabel}]`);
    lines.push(`    class ${catId} categoryClass`);
    
          byCategory[cat].forEach((th, i) => {
        const elId = `${catId}_E${i}`;
        const cId = `${catId}_C${i}`;
        const sId = `${catId}_S${i}`;
        
        const element = wrapText(safeLabel(th.elementName || 'Elemento'), 20);
        const capec = wrapText(safeLabel(
          th.capecId && th.capecName ? `${th.capecId}: ${th.capecName}` : (th.capecId || th.capecName || 'CAPEC')
        ), 25);
        const scenario = wrapText(safeLabel(th.threatScenario || 'Cen√°rio'), 30);
        
        lines.push(`    ${elId}[${element}]`);
        lines.push(`    ${cId}[${capec}]`);
        lines.push(`    ${sId}[${scenario}]`);
        lines.push(`    class ${elId} elementClass`);
        lines.push(`    class ${cId} capecClass`);
        lines.push(`    class ${sId} scenarioClass`);
        
        // Conex√µes verticais mais claras
        lines.push(`    ${elId} --> ${cId}`);
        lines.push(`    ${cId} --> ${sId}`);
      });
    
    lines.push('  end');
    lines.push(`  ROOT --> ${catId}`);
  });

  return lines.join('\n');
}

export const refineAnalysis = async (
  currentReportMarkdown: string,
  modelConfig?: any
): Promise<string> => {
  // Calcular complexidade da tarefa de refinamento
  const complexity = calculateTaskComplexity({ generalDescription: currentReportMarkdown }, "");
  console.log(`[AI Service] Complexidade do refinamento detectada: ${complexity}`);

  const prompt = `
Voc√™ √© um especialista s√™nior em seguran√ßa cibern√©tica revisando e refinando um relat√≥rio de modelagem de amea√ßas existente.

Relat√≥rio Atual (Markdown) para Refinar:
---
${currentReportMarkdown}
---

Tarefa (Responda em Portugu√™s do Brasil):
Sua tarefa √© refinar o relat√≥rio de modelagem de amea√ßas fornecido. Analise o conte√∫do do Markdown e melhore:

1. **Clareza e Coer√™ncia**: Melhore a linguagem para torn√°-la mais clara e concisa.
2. **Detalhes T√©cnicos**: Adicione mais detalhes t√©cnicos onde for apropriado, especialmente nas descri√ß√µes das amea√ßas e mitiga√ß√µes.
3. **Formato**: Mantenha o formato Markdown, mas melhore a estrutura e a apresenta√ß√£o.
4. **Abrang√™ncia**: Verifique se todas as se√ß√µes est√£o completas e bem elaboradas.
5. **A√ß√£o**: As mitiga√ß√µes devem ser acion√°veis e espec√≠ficas.

IMPORTANTE - IDIOMA:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- Mantenha formata√ß√£o Markdown clara e organizada
- ESCREVA TUDO EM PORTUGU√äS DO BRASIL

Sa√≠da:
Retorne o relat√≥rio refinado em formato Markdown, sem explica√ß√µes ou texto extra.
`;

  // Usar endpoint do backend para gera√ß√£o de conte√∫do
  const backendResponse = await fetch('http://localhost:3001/api/generate-content', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      prompt,
      modelConfig
    })
  });

  if (!backendResponse.ok) {
    throw new Error(`Erro na gera√ß√£o de conte√∫do: ${backendResponse.statusText}`);
  }

  const result = await backendResponse.json();
  const response = result.content;
  return response.response.text();
};

/**
 * Usa a IA para resumir e formatar a descri√ß√£o geral do sistema a partir de um texto livre.
 * @param fullDescription Texto livre informado pelo usu√°rio sobre o sistema.
 * @param modelConfig Configura√ß√£o do modelo a ser usado.
 * @returns Promise<Partial<SystemInfo>> com a descri√ß√£o geral resumida e formatada.
 */
export const summarizeSystemDescription = async (fullDescription: string, modelConfig?: any): Promise<Partial<SystemInfo>> => {
  if (!fullDescription) throw new Error("Descri√ß√£o do sistema n√£o informada.");
  
  // Para resumos, sempre usar complexidade simples
  const complexity = 'SIMPLE' as const;
  console.log(`[AI Service] Executando resumo do sistema com complexidade: ${complexity}`);
  
  const prompt = `
Voc√™ √© um assistente de seguran√ßa da informa√ß√£o especializado em an√°lise de sistemas. 

Leia a descri√ß√£o completa do sistema abaixo e extraia/resuma de forma clara e objetiva os seguintes campos:

1. **generalDescription**: Resuma o objetivo e funcionamento geral do sistema em at√© 5-6 linhas, destacando os aspectos principais.

2. **components**: Liste os principais componentes/m√≥dulos do sistema de forma organizada (ex: frontend, backend, bancos de dados, servi√ßos).

3. **sensitiveData**: Liste os tipos de dados sens√≠veis tratados pelo sistema (ex: dados pessoais, dados de sa√∫de, financeiros, credenciais).

4. **technologies**: Liste as principais tecnologias, frameworks, linguagens e ferramentas utilizadas.

5. **authentication**: Descreva os mecanismos de autentica√ß√£o e autoriza√ß√£o implementados no sistema.

6. **userProfiles**: Liste os perfis/tipos de usu√°rio que interagem com o sistema.

7. **externalIntegrations**: Liste as integra√ß√µes externas, APIs de terceiros e sistemas conectados.

INSTRU√á√ïES IMPORTANTES:
- TODOS OS TEXTOS DEVEM ESTAR EM PORTUGU√äS DO BRASIL
- Seja conciso mas informativo
- Se a descri√ß√£o n√£o mencionar explicitamente algum campo, tente inferir a partir do contexto
- Se realmente n√£o houver informa√ß√£o dispon√≠vel, use "N√£o informado" ou "N√£o especificado"
- Mantenha formata√ß√£o clara com quebras de linha quando apropriado
- ESCREVA TUDO EM PORTUGU√äS DO BRASIL

Responda APENAS com um objeto JSON com as chaves exatamente como especificado, sem explica√ß√µes ou texto extra fora do JSON.

Descri√ß√£o completa do sistema:
"""
${fullDescription}
"""

Sa√≠da esperada (exemplo de estrutura):
{
  "generalDescription": "Sistema de gest√£o...",
  "components": "Frontend: React, Angular\nBackend: Node.js, Python\nBanco de Dados: MySQL, MongoDB",
  "sensitiveData": "Dados pessoais (CPF, nome, endere√ßo)\nDados de sa√∫de (prescri√ß√µes)\nDados financeiros",
  "technologies": "Node.js, Python, MySQL, Redis, Docker",
  "authentication": "JWT, OAuth 2.0, Certifica√ß√£o Digital ICP-Brasil",
  "userProfiles": "Administrador, Farmac√™utico, Cliente, Gerente",
  "externalIntegrations": "ANVISA (SNGPC), Operadoras de Sa√∫de, APIs de Delivery"
}
`;

  // Usar endpoint do backend para gera√ß√£o de conte√∫do
  const backendResponse = await fetch('http://localhost:3001/api/generate-content', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      prompt,
      modelConfig
    })
  });

  if (!backendResponse.ok) {
    throw new Error(`Erro na gera√ß√£o de conte√∫do: ${backendResponse.statusText}`);
  }

  const result = await backendResponse.json();
  const response = result.content;
  const parsedResult = parseJsonFromText(response.response.text());
  
  // Garantir que todos os campos existam
  return {
    generalDescription: parsedResult.generalDescription || "N√£o informado",
    components: parsedResult.components || "N√£o informado",
    sensitiveData: parsedResult.sensitiveData || "N√£o informado",
    technologies: parsedResult.technologies || "N√£o informado",
    authentication: parsedResult.authentication || "N√£o informado",
    userProfiles: parsedResult.userProfiles || "N√£o informado",
    externalIntegrations: parsedResult.externalIntegrations || "N√£o informado"
  };
};