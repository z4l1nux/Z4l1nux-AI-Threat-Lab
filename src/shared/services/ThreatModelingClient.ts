/**
 * Cliente TypeScript para Threat Modeling
 * Substitui o threat-modeling.js com type safety completo
 */

import { 
  ThreatModelingRequest, 
  ThreatModelingResponse, 
  Threat, 
  CenarioRisco,
  StrideCategory,
  ProbabilityLevel,
  SeverityLevel
} from '../types/threat-modeling';

export class ThreatModelingClient {
  private baseUrl: string;

  constructor(baseUrl: string = 'http://localhost:3000') {
    this.baseUrl = baseUrl;
  }

  /**
   * Gera an√°lise de threat modeling
   */
  async generateThreatModeling(request: ThreatModelingRequest): Promise<ThreatModelingResponse> {
    try {
      console.log('üîç Enviando requisi√ß√£o de threat modeling:', request);
      
      const response = await fetch(`${this.baseUrl}/api/threat-modeling`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json() as any;
      console.log('üì° Resposta recebida:', result);
      
      return this.processAIResponse(result.resposta, request.systemType);
    } catch (error) {
      console.error('‚ùå Erro na requisi√ß√£o de threat modeling:', error);
      throw error;
    }
  }

  /**
   * Processa resposta da IA com type safety
   */
  private processAIResponse(aiResponse: string, systemType: string): ThreatModelingResponse {
    try {
      console.log('üîç Processando resposta da IA:', aiResponse ? aiResponse.substring(0, 200) + '...' : 'RESPOSTA VAZIA');
      
      if (!aiResponse || aiResponse.trim() === '') {
        console.log('‚ö†Ô∏è Resposta da IA vazia, usando mock');
        return {
          success: false,
          threats: this.getMockThreatsForSystem(systemType),
          source: 'mock',
          confidence: 0
        };
      }

      // Verificar se a resposta cont√©m padr√µes de recusa ou erro
      const refusalPatterns = [
        "I'm sorry, but I can't assist",
        "I cannot help",
        "I'm not able to",
        "I can't provide",
        "I'm unable to",
        "I don't have the ability",
        "I'm not programmed to",
        "I cannot generate",
        "I'm not designed to",
        "does not contain any explicit or implicit questions",
        "no explicit or implicit questions",
        "result\": null",
        "message\": \"The provided text"
      ];
      
      const isRefusal = refusalPatterns.some(pattern => 
        aiResponse.toLowerCase().includes(pattern.toLowerCase())
      );
      
      if (isRefusal) {
        console.log('‚ö†Ô∏è IA recusou a solicita√ß√£o ou n√£o entendeu, usando mock');
        return {
          success: false,
          threats: this.getMockThreatsForSystem(systemType),
          source: 'mock',
          confidence: 0
        };
      }

      // Tentar parsear JSON
      let parsedResponse: any;
      try {
        parsedResponse = JSON.parse(aiResponse);
      } catch (e) {
        // Procurar JSON em blocos de c√≥digo - suporte para array e objeto
        const jsonBlockMatch = aiResponse.match(/```(?:json)?\s*(\[[\s\S]*?\]|\{[\s\S]*?\})\s*```/i);
        if (jsonBlockMatch) {
          try {
            parsedResponse = JSON.parse(jsonBlockMatch[1]);
          } catch (jsonError) {
            console.log('‚ö†Ô∏è JSON malformado, tentando corrigir...');
            // Tentar corrigir JSON malformado
            let jsonText = jsonBlockMatch[1];
            // Corrigir aspas n√£o escapadas em strings
            jsonText = jsonText.replace(/"([^"]*)"([^"]*)"([^"]*)":/g, '"$1$2$3":');
            // Corrigir v√≠rgulas extras
            jsonText = jsonText.replace(/,(\s*[}\]])/g, '$1');
            try {
              parsedResponse = JSON.parse(jsonText);
            } catch (finalError) {
              console.log('‚ùå N√£o foi poss√≠vel corrigir JSON:', finalError);
              throw new Error('JSON malformado e n√£o foi poss√≠vel corrigir');
            }
          }
        } else {
          throw new Error('N√£o foi poss√≠vel parsear a resposta da IA');
        }
      }

      // Verificar formato structured outputs (Ollama) - FORMATO CORRETO
      if (parsedResponse.threats && Array.isArray(parsedResponse.threats)) {
        console.log('üéØ Structured Outputs (threats) detectado!');
        const threats = this.validateAndNormalizeThreats(parsedResponse.threats);
        console.log(`‚úÖ Processados ${threats.length} amea√ßas via structured outputs`);
        return {
          success: threats.length > 0,
          threats,
          source: 'ai',
          confidence: 0.95 // Alta confian√ßa para structured outputs
        };
      }

      // Fallback: Verificar formato cenarios_risco (Ollama antigo)
      if (parsedResponse.cenarios_risco && Array.isArray(parsedResponse.cenarios_risco)) {
        console.log('üéØ Formato Ollama antigo (cenarios_risco) detectado!');
        const threats = this.convertCenariosRiscoToThreats(parsedResponse.cenarios_risco);
        console.log(`‚úÖ Convertidos ${threats.length} cen√°rios para amea√ßas`);
        return {
          success: threats.length > 0,
          threats,
          source: 'ai',
          confidence: threats.length > 0 ? 0.8 : 0.1
        };
      }

      // Verificar formato cenarios_de_risco (OpenRouter)
      if (parsedResponse.cenarios_de_risco && Array.isArray(parsedResponse.cenarios_de_risco)) {
        console.log('üéØ Formato OpenRouter (cenarios_de_risco) detectado!');
        const threats = this.convertCenariosRiscoToThreats(parsedResponse.cenarios_de_risco);
        return {
          success: true,
          threats,
          source: 'ai',
          confidence: 0.9
        };
      }

      // Verificar formato array direto (OpenRouter novo formato)
      if (Array.isArray(parsedResponse) && parsedResponse.length > 0) {
        console.log('üéØ Formato OpenRouter (array direto) detectado!');
        const threats = this.convertCenariosRiscoToThreats(parsedResponse);
        return {
          success: true,
          threats,
          source: 'ai',
          confidence: 0.9
        };
      }

      // Verificar formato com apenas resumo (formato incompleto)
      if (parsedResponse.resumo && !parsedResponse.cenarios_risco && !parsedResponse.cenarios_de_risco) {
        console.log('‚ö†Ô∏è Formato incompleto detectado (apenas resumo), usando fallback');
        return {
          success: false,
          threats: this.getMockThreatsForSystem(systemType),
          source: 'mock',
          confidence: 0
        };
      }

      // Fallback para mock
      return {
        success: false,
        threats: this.getMockThreatsForSystem(systemType),
        source: 'mock',
        confidence: 0
      };

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta da IA:', error);
      return {
        success: false,
        threats: this.getMockThreatsForSystem(systemType),
        source: 'mock',
        confidence: 0
      };
    }
  }

  /**
   * Valida e normaliza amea√ßas vindas de structured outputs
   */
  private validateAndNormalizeThreats(threats: any[]): Threat[] {
    const normalizedThreats: Threat[] = [];
    
    threats.forEach((threat, index) => {
      try {
        // Validar campos obrigat√≥rios
        if (!threat.id || !threat.ameaca || !threat.descricao) {
          console.warn(`‚ö†Ô∏è Amea√ßa ${index + 1} com campos obrigat√≥rios faltando, pulando...`);
          return;
        }

        const normalizedThreat: Threat = {
          id: threat.id || `T${String(index + 1).padStart(3, '0')}`,
          stride: Array.isArray(threat.stride) ? threat.stride : ['T'],
          categoria: threat.categoria || 'Seguran√ßa Geral',
          ameaca: threat.ameaca,
          descricao: threat.descricao,
          impacto: threat.impacto || 'Impacto n√£o especificado',
          probabilidade: threat.probabilidade || 'M√©dia',
          severidade: threat.severidade || 'M√©dia',
          mitigacao: threat.mitigacao || 'Implementar controles de seguran√ßa apropriados',
          capec: threat.capec || `CAPEC-${Math.floor(Math.random() * 900) + 100}`,
          deteccao: threat.deteccao || 'Monitoramento baseado em logs e m√©tricas de seguran√ßa'
        };

        normalizedThreats.push(normalizedThreat);
        console.log(`‚úÖ Amea√ßa ${index + 1} normalizada: ${normalizedThreat.ameaca}`);
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao normalizar amea√ßa ${index + 1}:`, error);
      }
    });

    return normalizedThreats;
  }

  /**
   * Converte formato cenarios_risco do Ollama para formato de amea√ßas
   */
  private convertCenariosRiscoToThreats(cenarios: CenarioRisco[]): Threat[] {
    const threats: Threat[] = [];
    
    console.log(`üîÑ Convertendo ${cenarios.length} cen√°rios...`);
    
    cenarios.forEach((cenario, index) => {
      try {
        console.log(`üìã Processando cen√°rio ${index + 1}:`, cenario);
        
        // Extrair informa√ß√µes do cen√°rio - Suporte a m√∫ltiplos formatos
        const tipoRisco = cenario.tipo_risco || cenario.tipo_de_risco || cenario.cenario || cenario.nome || cenario.tipo || cenario['Cen√°rio de Risco'] || '';
        const descritivo = cenario.descritivo || cenario.descricao || cenario.resumo || cenario.exemplo || cenario['Descri√ß√£o'] || '';
        const impacto = cenario.impacto || cenario['Impacto'] || '';
        
        // Verificar se temos informa√ß√µes m√≠nimas
        if (!tipoRisco && !descritivo) {
          console.warn(`‚ö†Ô∏è Cen√°rio ${index + 1} sem informa√ß√µes v√°lidas, pulando...`);
          return;
        }
        
        // Determinar categorias STRIDE primeiro
        const strideCategories = this.determineStrideCategories(tipoRisco + ' ' + descritivo);
        
        let mitigacao = '';
        
        // Processar mitiga√ß√£o - pode ser array de objetos ou string
        if (Array.isArray(cenario.mitigacao)) {
          if (cenario.mitigacao.length > 0 && typeof cenario.mitigacao[0] === 'object') {
            // Array de objetos com 'medida' e 'detalhes'
            mitigacao = cenario.mitigacao.map((m: any) => {
              if (typeof m === 'object' && m.medida) {
                return m.detalhes ? `${m.medida}: ${m.detalhes}` : m.medida;
              }
              return String(m);
            }).join('; ');
          } else {
            // Array de strings
            mitigacao = cenario.mitigacao.join('; ');
          }
        } else {
          mitigacao = cenario.mitigacao || cenario.mitiga√ß√£o || cenario['Mitiga√ß√£o'] || '';
        }
        
        // Se mitiga√ß√£o estiver vazia, gerar uma baseada no tipo de amea√ßa
        if (!mitigacao || mitigacao.trim() === '') {
          mitigacao = this.generateMitigationByStride(strideCategories, descritivo);
        }
        
        // Extrair nome da amea√ßa
        let ameaca = tipoRisco;
        if (ameaca.includes('(') && ameaca.includes(')')) {
          // Remover categorias STRIDE do nome (ex: "Spoofing (S)" -> "Spoofing")
          ameaca = ameaca.replace(/\s*\([^)]+\)\s*$/, '').trim();
        }
        
        // Se ainda estiver vazio, tentar extrair do resumo
        if (!ameaca || ameaca.length < 3) {
          const firstWords = descritivo.split(' ').slice(0, 3).join(' ');
          ameaca = firstWords.length > 10 ? firstWords.substring(0, 50) + '...' : firstWords;
        }
        
        // Determinar categoria
        const categoria = this.extractCategory(descritivo + ' ' + impacto);
        
        // Determinar severidade - usar descri√ß√£o se impacto estiver vazio
        const textoParaSeveridade = impacto || descritivo;
        const severidade = this.determineSeverity(textoParaSeveridade);
        
        // Determinar probabilidade
        const probabilidade = this.determineProbability(tipoRisco);
        
        const threat: Threat = {
          id: `T${String(index + 1).padStart(3, '0')}`,
          stride: strideCategories,
          categoria,
          ameaca,
          descricao: descritivo,
          impacto,
          probabilidade,
          severidade,
          mitigacao,
          capec: this.extractCapec(descritivo + ' ' + impacto),
          deteccao: this.determineDetection(strideCategories, descritivo, impacto)
        };
        
        threats.push(threat);
        
        console.log(`üîç Convertido cen√°rio ${index + 1}:`, {
          ameaca: threat.ameaca,
          categoria: threat.categoria,
          stride: threat.stride,
          severidade: threat.severidade
        });
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao converter cen√°rio ${index + 1}:`, error);
        // Criar uma amea√ßa b√°sica como fallback
        const fallbackThreat: Threat = {
          id: `T${String(index + 1).padStart(3, '0')}`,
          stride: ['T'],
          categoria: 'Seguran√ßa Geral',
          ameaca: `Amea√ßa ${index + 1} - Formato n√£o reconhecido`,
          descricao: `Cen√°rio de risco detectado mas n√£o foi poss√≠vel processar completamente: ${JSON.stringify(cenario).substring(0, 100)}...`,
          impacto: 'Impacto n√£o especificado',
          probabilidade: 'M√©dia',
          severidade: 'M√©dia',
          mitigacao: 'Implementar controles de seguran√ßa apropriados',
          capec: `CAPEC-${Math.floor(Math.random() * 900) + 100}`,
          deteccao: 'Monitoramento baseado em logs e m√©tricas de seguran√ßa'
        };
        threats.push(fallbackThreat);
      }
    });
    
    console.log(`‚úÖ Convers√£o conclu√≠da: ${threats.length} amea√ßas geradas de ${cenarios.length} cen√°rios`);
    return threats;
  }

  /**
   * Determina categorias STRIDE baseadas no conte√∫do
   */
  private determineStrideCategories(text: string): StrideCategory[] {
    const detectedCategories: StrideCategory[] = [];
    const lowerText = text.toLowerCase();
    
    const strideKeywords = {
      'S': ['spoofing', 'impersonation', 'falsifica√ß√£o', 'identity', 'autentica√ß√£o', 'login', 'authentication', 'credential', 'assume a identidade'],
      'T': ['tampering', 'modification', 'altera√ß√£o', 'manipulation', 'manipula√ß√£o', 'integridade', 'integrity', 'modify', 'dados financeiros'],
      'R': ['repudiation', 'denial', 'nega√ß√£o', 'rep√∫dio', 'auditoria', 'logs', 'logging', 'accountability', 'n√£o ter realizado'],
      'I': ['information', 'disclosure', 'exposi√ß√£o', 'vazamento', 'dados', 'sens√≠vel', 'privacy', 'confidential', 'dados confidenciais'],
      'D': ['denial', 'service', 'nega√ß√£o', 'servi√ßo', 'ddos', 'sobrecarga', 'availability', 'downtime', 'indispon√≠vel', 'funcionamento normal'],
      'E': ['elevation', 'privilege', 'escala√ß√£o', 'privil√©gio', 'administrativo', 'bypass', 'unauthorized access', 'privil√©gios de um usu√°rio']
    };
    
    // Priorizar detec√ß√£o por ordem de especificidade
    for (const [stride, keywords] of Object.entries(strideKeywords)) {
      if (keywords.some(keyword => lowerText.includes(keyword))) {
        detectedCategories.push(stride as StrideCategory);
      }
    }
    
    // Se n√£o encontrou nenhuma categoria espec√≠fica, tentar detectar pelo nome do cen√°rio
    if (detectedCategories.length === 0) {
      if (lowerText.includes('spoofing')) detectedCategories.push('S');
      else if (lowerText.includes('tampering')) detectedCategories.push('T');
      else if (lowerText.includes('repudiation')) detectedCategories.push('R');
      else if (lowerText.includes('information disclosure')) detectedCategories.push('I');
      else if (lowerText.includes('denial of service')) detectedCategories.push('D');
      else if (lowerText.includes('elevation of privilege')) detectedCategories.push('E');
    }
    
    return detectedCategories.length > 0 ? detectedCategories : ['T'];
  }

  /**
   * Gera mitiga√ß√£o baseada no tipo STRIDE quando n√£o fornecida pela IA
   */
  private generateMitigationByStride(strideCategories: StrideCategory[], descritivo: string): string {
    const mitigations: string[] = [];
    
    // Mitiga√ß√µes espec√≠ficas por STRIDE
    if (strideCategories.includes('S')) {
      mitigations.push('Implementar autentica√ß√£o multifator (MFA)');
      mitigations.push('Valida√ß√£o rigorosa de identidades');
      mitigations.push('Monitoramento de tentativas de login suspeitas');
    }
    if (strideCategories.includes('T')) {
      mitigations.push('Criptografia em tr√¢nsito e repouso');
      mitigations.push('Assinaturas digitais para integridade');
      mitigations.push('Valida√ß√£o de integridade de dados');
    }
    if (strideCategories.includes('R')) {
      mitigations.push('Logs audit√°veis com assinatura digital');
      mitigations.push('Sistema de auditoria cont√≠nua');
      mitigations.push('Integra√ß√£o com blockchain para imutabilidade');
    }
    if (strideCategories.includes('I')) {
      mitigations.push('Controle de acesso baseado em roles (RBAC)');
      mitigations.push('Criptografia de dados sens√≠veis');
      mitigations.push('Monitoramento de acessos n√£o autorizados');
    }
    if (strideCategories.includes('D')) {
      mitigations.push('Sistemas de prote√ß√£o DDoS');
      mitigations.push('Rate limiting e throttling');
      mitigations.push('Monitoramento de disponibilidade');
    }
    if (strideCategories.includes('E')) {
      mitigations.push('Princ√≠pio do menor privil√©gio');
      mitigations.push('Revis√£o peri√≥dica de permiss√µes');
      mitigations.push('Auditoria de escala√ß√£o de privil√©gios');
    }
    
    // Mitiga√ß√µes gerais baseadas no contexto
    if (descritivo.toLowerCase().includes('financeiro') || descritivo.toLowerCase().includes('banco')) {
      mitigations.push('Compliance com regulamenta√ß√µes banc√°rias');
      mitigations.push('Monitoramento de transa√ß√µes suspeitas');
    }
    
    return mitigations.length > 0 ? mitigations.join('; ') : 'Implementar controles de seguran√ßa apropriados';
  }

  /**
   * Determina m√©todo de detec√ß√£o baseado no tipo de amea√ßa
   */
  private determineDetection(strideCategories: StrideCategory[], descritivo: string, impacto: string): string {
    const text = (descritivo + ' ' + impacto).toLowerCase();
    
    // Detec√ß√£o espec√≠fica por STRIDE
    if (strideCategories.includes('S')) {
      return 'Monitoramento de tentativas de login falhidas consecutivas e an√°lise comportamental';
    }
    if (strideCategories.includes('T')) {
      return 'Monitoramento de anomalias em par√¢metros de requisi√ß√£o e integridade de dados';
    }
    if (strideCategories.includes('R')) {
      return 'Auditoria cont√≠nua de transa√ß√µes e logs de atividade com assinatura digital';
    }
    if (strideCategories.includes('I')) {
      return 'Monitoramento de acessos n√£o autorizados e an√°lise de vazamento de dados';
    }
    if (strideCategories.includes('D')) {
      return 'Monitoramento de tr√°fego an√¥malo e m√©tricas de disponibilidade do sistema';
    }
    if (strideCategories.includes('E')) {
      return 'Auditoria de privil√©gios e monitoramento de escala√ß√£o de permiss√µes';
    }
    
    // Detec√ß√£o baseada em palavras-chave
    if (text.includes('phishing') || text.includes('credenciais')) {
      return 'An√°lise de padr√µes de phishing e monitoramento de tentativas de roubo de credenciais';
    }
    if (text.includes('ddos') || text.includes('nega√ß√£o')) {
      return 'Monitoramento de tr√°fego DDoS e an√°lise de padr√µes de ataque';
    }
    if (text.includes('dados') || text.includes('informa√ß√£o')) {
      return 'Monitoramento de acessos a dados sens√≠veis e detec√ß√£o de vazamentos';
    }
    if (text.includes('transa√ß√£o') || text.includes('financeiro')) {
      return 'An√°lise de transa√ß√µes suspeitas e monitoramento de padr√µes an√¥malos';
    }
    
    // Fallback gen√©rico
    return 'Monitoramento baseado em logs e m√©tricas de seguran√ßa';
  }

  /**
   * Extrai categoria baseada no conte√∫do
   */
  private extractCategory(text: string): string {
    const lowerText = text.toLowerCase();
    if (/authentication|autentica√ß√£o|login|senha|password/i.test(lowerText)) return 'Autentica√ß√£o';
    if (/data|dados|integrity|integridade|manipula√ß√£o|manipulation/i.test(lowerText)) return 'Integridade de Dados';
    if (/information|informa√ß√£o|disclosure|exposi√ß√£o|leak|vazamento|privacidade/i.test(lowerText)) return 'Exposi√ß√£o de Dados';
    if (/denial|nega√ß√£o|service|servi√ßo|ddos|dos|sobrecarga/i.test(lowerText)) return 'Nega√ß√£o de Servi√ßo';
    if (/privilege|privil√©gio|elevation|escala√ß√£o|acesso/i.test(lowerText)) return 'Escala√ß√£o de Privil√©gios';
    if (/injection|inje√ß√£o|sql|code|c√≥digo/i.test(lowerText)) return 'Inje√ß√£o de C√≥digo';
    if (/tokeniza√ß√£o|tokenization|cart√£o|card/i.test(lowerText)) return 'Tokeniza√ß√£o de Dados';
    return 'Seguran√ßa Geral';
  }

  /**
   * Determina severidade baseada no impacto - MELHORADO
   */
  private determineSeverity(impacto: string): SeverityLevel {
    const impactoLower = impacto.toLowerCase();
    
    // Severidade Cr√≠tica - Contexto banc√°rio
    if (impactoLower.includes('cr√≠tica') || impactoLower.includes('cr√≠tico') || impactoLower.includes('critical') ||
        impactoLower.includes('fraude financeira') || impactoLower.includes('financial fraud') ||
        impactoLower.includes('comprometimento total') || impactoLower.includes('total compromise') ||
        impactoLower.includes('perda total') || impactoLower.includes('total loss') ||
        impactoLower.includes('dados financeiros') || impactoLower.includes('financial data') ||
        impactoLower.includes('transa√ß√µes') || impactoLower.includes('transactions') ||
        impactoLower.includes('contas banc√°rias') || impactoLower.includes('bank accounts') ||
        impactoLower.includes('pix') || impactoLower.includes('credenciais banc√°rias') ||
        impactoLower.includes('danos √† reputa√ß√£o') || impactoLower.includes('reputation damage')) {
      return 'Cr√≠tica';
    }
    // Severidade Alta - Contexto banc√°rio
    else if (impactoLower.includes('alta') || impactoLower.includes('alto') || impactoLower.includes('high') ||
             impactoLower.includes('perda de dados') || impactoLower.includes('data loss') ||
             impactoLower.includes('viola√ß√£o de privacidade') || impactoLower.includes('privacy violation') ||
             impactoLower.includes('vazamento de dados') || impactoLower.includes('data breach') ||
             impactoLower.includes('acesso n√£o autorizado') || impactoLower.includes('unauthorized access') ||
             impactoLower.includes('perda de neg√≥cios') || impactoLower.includes('business loss') ||
             impactoLower.includes('compliance') || impactoLower.includes('regulat√≥rio') ||
             impactoLower.includes('clientes') || impactoLower.includes('customers') ||
             impactoLower.includes('dados sens√≠veis') || impactoLower.includes('sensitive data') ||
             impactoLower.includes('identidade') || impactoLower.includes('identity') ||
             impactoLower.includes('falsifica√ß√£o') || impactoLower.includes('forgery')) {
      return 'Alta';
    }
    // Severidade Baixa
    else if (impactoLower.includes('baixa') || impactoLower.includes('baixo') || impactoLower.includes('low') ||
             impactoLower.includes('menor') || impactoLower.includes('minor') ||
             impactoLower.includes('inconveniente') || impactoLower.includes('inconvenience') ||
             impactoLower.includes('degrada√ß√£o') || impactoLower.includes('degradation')) {
      return 'Baixa';
    }
    
    // Para contexto banc√°rio, assumir Alta como padr√£o em vez de M√©dia
    if (impactoLower.includes('banco') || impactoLower.includes('bank') || 
        impactoLower.includes('financeiro') || impactoLower.includes('financial') ||
        impactoLower.includes('core banking') || impactoLower.includes('skybank')) {
      return 'Alta';
    }
    
    return 'M√©dia';
  }

  /**
   * Determina probabilidade baseada no tipo de amea√ßa
   */
  private determineProbability(tipoRisco: string): ProbabilityLevel {
    const lowerTipo = tipoRisco.toLowerCase();
    if (lowerTipo.includes('injection') || lowerTipo.includes('xss')) return 'Alta';
    if (lowerTipo.includes('spoofing') || lowerTipo.includes('dos')) return 'Alta';
    return 'M√©dia';
  }

  /**
   * Extrai CAPEC do texto
   */
  private extractCapec(text: string): string {
    const capecMatch = text.match(/CAPEC-\d+/gi);
    return capecMatch ? capecMatch[0] : `CAPEC-${Math.floor(Math.random() * 900) + 100}`;
  }

  /**
   * Amea√ßas mock para fallback
   */
  private getMockThreatsForSystem(systemType: string): Threat[] {
    const baseThreats: Threat[] = [
      {
        id: 'T001',
        stride: ['S', 'I'],
        categoria: 'Autentica√ß√£o',
        ameaca: 'Ataques de for√ßa bruta contra sistema de login',
        descricao: 'Atacantes podem tentar quebrar senhas atrav√©s de ataques automatizados de for√ßa bruta',
        impacto: 'Comprometimento de contas de usu√°rios e acesso n√£o autorizado ao sistema',
        probabilidade: 'M√©dia',
        severidade: 'Alta',
        mitigacao: 'Implementar bloqueio de conta ap√≥s tentativas falhidas, CAPTCHA, autentica√ß√£o multifator',
        capec: 'CAPEC-16, CAPEC-49',
        deteccao: 'Monitoramento de tentativas de login falhidas consecutivas'
      },
      {
        id: 'T002',
        stride: ['T', 'E'],
        categoria: 'Integridade de Dados',
        ameaca: 'Manipula√ß√£o de par√¢metros de requisi√ß√£o',
        descricao: 'Modifica√ß√£o n√£o autorizada de par√¢metros HTTP para alterar comportamento da aplica√ß√£o',
        impacto: 'Altera√ß√£o n√£o autorizada de dados ou bypass de controles de seguran√ßa',
        probabilidade: 'Alta',
        severidade: 'M√©dia',
        mitigacao: 'Valida√ß√£o robusta de entrada, assinatura de tokens, controle de integridade',
        capec: 'CAPEC-137, CAPEC-160',
        deteccao: 'Monitoramento de anomalias em par√¢metros de requisi√ß√£o'
      }
    ];

    // Filtrar amea√ßas baseado no tipo de sistema
    switch (systemType) {
      case 'web':
        return baseThreats.filter(t => ['T001', 'T002'].includes(t.id));
      case 'api':
        return baseThreats.filter(t => ['T002'].includes(t.id));
      case 'mobile':
        return baseThreats.filter(t => ['T001'].includes(t.id));
      default:
        return baseThreats;
    }
  }
}
