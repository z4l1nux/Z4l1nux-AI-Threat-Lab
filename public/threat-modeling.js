/**
 * Cliente JavaScript para Threat Modeling
 * Usa o novo servi√ßo TypeScript dedicado
 */

class ThreatModelingClient {
  constructor() {
    this.baseUrl = window.location.origin;
  }

  /**
   * Gera an√°lise de threat modeling
   */
  async generateThreatModeling(request) {
    try {
      console.log('üîç Enviando requisi√ß√£o de threat modeling:', request);
      
      const response = await fetch(`${this.baseUrl}/api/threat-modeling`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('üì° Resposta recebida:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå Erro na requisi√ß√£o de threat modeling:', error);
      throw error;
    }
  }

  /**
   * Processa resposta da IA usando o servi√ßo TypeScript
   */
  processAIResponse(aiResponse, systemType) {
    // Esta fun√ß√£o agora ser√° chamada do servidor TypeScript
    // Mantida aqui para compatibilidade com o frontend existente
    console.log('üîç Processando resposta da IA no cliente:', typeof aiResponse === 'string' ? aiResponse.substring(0, 200) + '...' : aiResponse);
    return this.parseThreatsFromResponse(aiResponse, systemType);
  }

  /**
   * Parse b√°sico de amea√ßas da resposta (fallback)
   */
  parseThreatsFromResponse(aiResponse, systemType) {
    try {
      let threats = [];
      
      // Tentar parsear JSON
      try {
        const directParse = JSON.parse(aiResponse);
        
        // Verificar formato cenarios_risco do Ollama
        if (directParse.cenarios_risco && Array.isArray(directParse.cenarios_risco)) {
          console.log('üéØ Formato Ollama (cenarios_risco) detectado no frontend!');
          threats = this.convertCenariosRiscoToThreats(directParse.cenarios_risco);
        } else if (directParse.cenarios_de_risco && Array.isArray(directParse.cenarios_de_risco)) {
          console.log('üéØ Formato OpenRouter (cenarios_de_risco) detectado no frontend!');
          threats = this.convertCenariosDeRiscoToThreats(directParse.cenarios_de_risco);
        } else if (directParse.cenariosDeRisco && Array.isArray(directParse.cenariosDeRisco)) {
          console.log('üéØ Formato OpenRouter (cenariosDeRisco) detectado no frontend!');
          threats = this.convertCenariosDeRiscoToThreats(directParse.cenariosDeRisco);
        } else {
          threats = directParse.threats || directParse.ameacas || [];
        }
      } catch (e) {
        // Procurar JSON em blocos de c√≥digo
        const jsonBlockMatch = aiResponse.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/i);
        if (jsonBlockMatch) {
          try {
            const parsed = JSON.parse(jsonBlockMatch[1]);
            
            // Verificar formato cenarios_risco do Ollama
            if (parsed.cenarios_risco && Array.isArray(parsed.cenarios_risco)) {
              console.log('üéØ Formato Ollama (cenarios_risco) detectado em bloco!');
              threats = this.convertCenariosRiscoToThreats(parsed.cenarios_risco);
            } else if (parsed.cenarios_de_risco && Array.isArray(parsed.cenarios_de_risco)) {
              console.log('üéØ Formato OpenRouter (cenarios_de_risco) detectado em bloco!');
              threats = this.convertCenariosDeRiscoToThreats(parsed.cenarios_de_risco);
            } else if (parsed.cenariosDeRisco && Array.isArray(parsed.cenariosDeRisco)) {
              console.log('üéØ Formato OpenRouter (cenariosDeRisco) detectado em bloco!');
              threats = this.convertCenariosDeRiscoToThreats(parsed.cenariosDeRisco);
            } else {
              threats = parsed.threats || parsed.ameacas || [];
            }
          } catch (parseError) {
            console.log('‚ùå Erro ao parsear JSON do bloco:', parseError);
          }
        }
      }

      if (threats.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma amea√ßa encontrada, usando mock');
        threats = this.getMockThreatsForSystem(systemType);
      }

      return threats;
    } catch (error) {
      console.error('‚ùå Erro ao processar resposta da IA:', error);
      return this.getMockThreatsForSystem(systemType);
    }
  }

  /**
   * Converte formato cenarios_de_risco do OpenRouter para formato de amea√ßas
   */
  convertCenariosDeRiscoToThreats(cenarios) {
    const threats = [];
    
    cenarios.forEach((cenario, index) => {
      try {
        // Extrair informa√ß√µes do cen√°rio (suporta m√∫ltiplos formatos)
        const tipo = cenario.tipo || '';
        const descricao = cenario.descricao || '';
        const probabilidade = cenario.probabilidade || 'M√©dia';
        const impacto = cenario.impacto || 'M√©dio';
        const exemplo = cenario.exemplo || '';
        const exemplos = Array.isArray(cenario.exemplos) 
          ? cenario.exemplos.join('; ') 
          : exemplo;
        
        // Determinar categorias STRIDE baseadas no tipo
        const strideCategories = this.determineStrideCategories(tipo + ' ' + descricao);
        
        // Extrair nome da amea√ßa do tipo (remover categorias STRIDE se presentes)
        let ameaca = tipo;
        if (ameaca.includes('(') && ameaca.includes(')')) {
          // Remover categorias STRIDE do nome (ex: "S (Spoofing)" -> "Spoofing")
          ameaca = ameaca.replace(/^[A-Z]\s*\(/, '').replace(/\)$/, '').trim();
        }
        
        // Mapear nomes espec√≠ficos
        if (ameaca === 'Information Disclosure') ameaca = 'Exposi√ß√£o de Informa√ß√µes';
        else if (ameaca === 'Denial of Service') ameaca = 'Nega√ß√£o de Servi√ßo';
        else if (ameaca === 'Elevation of Privilege') ameaca = 'Escala√ß√£o de Privil√©gios';
        else if (ameaca === 'Repudiation') ameaca = 'Rep√∫dio de Transa√ß√µes';
        
        // Determinar categoria baseada no tipo
        const categoria = this.extractCategory(tipo + ' ' + descricao);
        
        // Mapear severidade do OpenRouter
        let severidade = 'M√©dia';
        if (impacto === 'Cr√≠tico') severidade = 'Cr√≠tica';
        else if (impacto === 'Alto') severidade = 'Alta';
        else if (impacto === 'M√©dio') severidade = 'M√©dia';
        else if (impacto === 'Baixo') severidade = 'Baixa';
        
        // Mapear probabilidade do OpenRouter
        let probabilidadeNormalizada = 'M√©dia';
        if (probabilidade === 'Alta') probabilidadeNormalizada = 'Alta';
        else if (probabilidade === 'M√©dia') probabilidadeNormalizada = 'M√©dia';
        else if (probabilidade === 'Baixa') probabilidadeNormalizada = 'Baixa';
        
        // Gerar mitiga√ß√£o baseada no tipo
        let mitigacao = 'Implementar controles de seguran√ßa apropriados';
        if (tipo.includes('Spoofing')) mitigacao = 'Autentica√ß√£o multifator, valida√ß√£o rigorosa de identidade, auditoria de acessos';
        else if (tipo.includes('Tampering')) mitigacao = 'Controle de integridade, assinaturas digitais, valida√ß√£o de dados';
        else if (tipo.includes('Information Disclosure')) mitigacao = 'Criptografia, controle de acesso, classifica√ß√£o de dados';
        else if (tipo.includes('Denial of Service')) mitigacao = 'Rate limiting, WAF, monitoramento de tr√°fego, redund√¢ncia';
        else if (tipo.includes('Elevation of Privilege')) mitigacao = 'Princ√≠pio do menor privil√©gio, auditoria de permiss√µes, controle de acesso';
        else if (tipo.includes('Repudiation')) mitigacao = 'Logs imut√°veis, assinaturas digitais, auditoria completa';
        
        const threat = {
          id: `T${String(index + 1).padStart(3, '0')}`,
          stride: strideCategories,
          categoria: categoria,
          ameaca: ameaca,
          descricao: descricao,
          impacto: exemplos ? `Exemplo: ${exemplos}. Impacto: ${impacto}` : `Impacto: ${impacto}`,
          probabilidade: probabilidadeNormalizada,
          severidade: severidade,
          mitigacao: mitigacao,
          capec: this.extractCapec(tipo + ' ' + descricao),
          deteccao: 'Monitoramento baseado em logs e m√©tricas de seguran√ßa'
        };
        
        threats.push(threat);
        
        console.log(`üîç Convertido cen√°rio OpenRouter ${index + 1}:`, {
          ameaca: threat.ameaca,
          categoria: threat.categoria,
          stride: threat.stride,
          severidade: threat.severidade
        });
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao converter cen√°rio OpenRouter ${index + 1}:`, error);
      }
    });
    
    return threats;
  }

  /**
   * Converte formato cenarios_risco do Ollama para formato de amea√ßas
   */
  convertCenariosRiscoToThreats(cenarios) {
    const threats = [];
    
    cenarios.forEach((cenario, index) => {
      try {
        // Extrair informa√ß√µes do cen√°rio - CORRIGIDO para usar os campos corretos da resposta da IA
        const tipoRisco = cenario.tipo_risco || '';
        const descritivo = cenario.descritivo || '';
        const impacto = cenario.impacto || '';
        const mitigacao = Array.isArray(cenario.mitigacao) 
          ? cenario.mitigacao.join('; ') 
          : cenario.mitigacao || '';
        
        // Determinar categorias STRIDE baseadas no tipo de risco e descritivo
        const strideCategories = this.determineStrideCategories(tipoRisco + ' ' + descritivo);
        
        // Extrair nome da amea√ßa do tipo_risco
        let ameaca = tipoRisco;
        if (ameaca.includes('(') && ameaca.includes(')')) {
          // Remover categorias STRIDE do nome (ex: "Spoofing (S)" -> "Spoofing")
          ameaca = ameaca.replace(/\s*\([^)]+\)\s*$/, '').trim();
        }
        
        // Determinar categoria baseada no conte√∫do
        const categoria = this.extractCategory(descritivo + ' ' + impacto);
        
        // Determinar severidade baseada no impacto - MELHORADO
        let severidade = 'M√©dia';
        const impactoLower = impacto.toLowerCase();
        
        // Severidade Cr√≠tica - palavras-chave de alto impacto
        if (impactoLower.includes('cr√≠tica') || impactoLower.includes('critical') ||
            impactoLower.includes('fraude financeira') || impactoLower.includes('financial fraud') ||
            impactoLower.includes('comprometimento total') || impactoLower.includes('total compromise') ||
            impactoLower.includes('perda total') || impactoLower.includes('total loss')) {
          severidade = 'Cr√≠tica';
        }
        // Severidade Alta - palavras-chave de impacto significativo
        else if (impactoLower.includes('alta') || impactoLower.includes('high') ||
                 impactoLower.includes('perda de dados') || impactoLower.includes('data loss') ||
                 impactoLower.includes('viola√ß√£o de privacidade') || impactoLower.includes('privacy violation') ||
                 impactoLower.includes('vazamento de dados') || impactoLower.includes('data breach') ||
                 impactoLower.includes('acesso n√£o autorizado') || impactoLower.includes('unauthorized access') ||
                 impactoLower.includes('perda de neg√≥cios') || impactoLower.includes('business loss') ||
                 impactoLower.includes('compliance') || impactoLower.includes('regulat√≥rio')) {
          severidade = 'Alta';
        }
        // Severidade Baixa - palavras-chave de baixo impacto
        else if (impactoLower.includes('baixa') || impactoLower.includes('low') ||
                 impactoLower.includes('menor') || impactoLower.includes('minor') ||
                 impactoLower.includes('inconveniente') || impactoLower.includes('inconvenience') ||
                 impactoLower.includes('degrada√ß√£o') || impactoLower.includes('degradation')) {
          severidade = 'Baixa';
        }
        
        // Determinar probabilidade baseada no tipo de amea√ßa
        let probabilidade = 'M√©dia';
        if (tipoRisco.toLowerCase().includes('injection') || tipoRisco.toLowerCase().includes('xss')) {
          probabilidade = 'Alta';
        } else if (tipoRisco.toLowerCase().includes('spoofing') || tipoRisco.toLowerCase().includes('dos')) {
          probabilidade = 'Alta';
        }
        
        const threat = {
          id: `T${String(index + 1).padStart(3, '0')}`,
          stride: strideCategories,
          categoria: categoria,
          ameaca: ameaca,
          descricao: descritivo,  // CORRIGIDO: usar descritivo em vez de resumo
          impacto: impacto,
          probabilidade: probabilidade,
          severidade: severidade,
          mitigacao: mitigacao,
          capec: this.extractCapec(descritivo + ' ' + impacto),
          deteccao: 'Monitoramento baseado em logs e m√©tricas de seguran√ßa'
        };
        
        threats.push(threat);
        
        console.log(`üîç Convertido cen√°rio ${index + 1}:`, {
          ameaca: threat.ameaca,
          categoria: threat.categoria,
          stride: threat.stride,
          severidade: threat.severidade
        });
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao converter cen√°rio ${index + 1}:`, error);
      }
    });
    
    return threats;
  }

  /**
   * Determina categorias STRIDE baseadas no conte√∫do
   */
  determineStrideCategories(text) {
    const detectedCategories = [];
    const lowerText = text.toLowerCase();
    
    const strideKeywords = {
      'S': ['spoofing', 'impersonation', 'falsifica√ß√£o', 'identity', 'autentica√ß√£o', 'login', 'authentication', 'credential'],
      'T': ['tampering', 'modification', 'altera√ß√£o', 'manipulation', 'manipula√ß√£o', 'integridade', 'integrity', 'modify'],
      'R': ['repudiation', 'denial', 'nega√ß√£o', 'rep√∫dio', 'auditoria', 'logs', 'logging', 'accountability'],
      'I': ['information', 'disclosure', 'exposi√ß√£o', 'vazamento', 'dados', 'sens√≠vel', 'privacy', 'confidential'],
      'D': ['denial', 'service', 'nega√ß√£o', 'servi√ßo', 'ddos', 'sobrecarga', 'availability', 'downtime'],
      'E': ['elevation', 'privilege', 'escala√ß√£o', 'privil√©gio', 'administrativo', 'bypass', 'unauthorized access']
    };
    
    for (const [stride, keywords] of Object.entries(strideKeywords)) {
      if (keywords.some(keyword => lowerText.includes(keyword))) {
        detectedCategories.push(stride);
      }
    }
    
    return detectedCategories.length > 0 ? detectedCategories : ['T'];
  }

  /**
   * Extrai categoria baseada no conte√∫do
   */
  extractCategory(text) {
    const lowerText = text.toLowerCase();
    if (/authentication|autentica√ß√£o|login|senha|password/i.test(lowerText)) return 'Autentica√ß√£o';
    if (/data|dados|integrity|integridade|manipula√ß√£o|manipulation/i.test(lowerText)) return 'Integridade de Dados';
    if (/information|informa√ß√£o|disclosure|exposi√ß√£o|leak|vazamento|privacidade/i.test(lowerText)) return 'Exposi√ß√£o de Dados';
    if (/denial|nega√ß√£o|service|servi√ßo|ddos|dos|sobrecarga/i.test(lowerText)) return 'Nega√ß√£o de Servi√ßo';
    if (/privilege|privil√©gio|elevation|escala√ß√£o|acesso/i.test(lowerText)) return 'Escala√ß√£o de Privil√©gios';
    if (/injection|inje√ß√£o|sql|code|c√≥digo/i.test(lowerText)) return 'Inje√ß√£o de C√≥digo';
    if (/tokeniza√ß√£o|tokenization|cart√£o|card/i.test(lowerText)) return 'Tokeniza√ß√£o de Dados';
    return 'Seguran√ßa Geral';
  }

  /**
   * Extrai CAPEC do texto
   */
  extractCapec(text) {
    const capecMatch = text.match(/CAPEC-\d+/gi);
    return capecMatch ? capecMatch[0] : `CAPEC-${Math.floor(Math.random() * 900) + 100}`;
  }

  /**
   * Amea√ßas mock para fallback
   */
  getMockThreatsForSystem(systemType) {
    const baseThreats = [
      {
        id: 'T001',
        stride: ['S', 'I'],
        categoria: 'Autentica√ß√£o',
        ameaca: 'Ataques de for√ßa bruta contra sistema de login',
        descricao: 'Atacantes podem tentar quebrar senhas atrav√©s de ataques automatizados de for√ßa bruta',
        impacto: 'Comprometimento de contas de usu√°rios e acesso n√£o autorizado ao sistema',
        probabilidade: 'M√©dia',
        severidade: 'Alta',
        mitigacao: 'Implementar bloqueio de conta ap√≥s tentativas falhidas, CAPTCHA, autentica√ß√£o multifator',
        capec: 'CAPEC-16, CAPEC-49',
        deteccao: 'Monitoramento de tentativas de login falhidas consecutivas'
      },
      {
        id: 'T002',
        stride: ['T', 'E'],
        categoria: 'Integridade de Dados',
        ameaca: 'Manipula√ß√£o de par√¢metros de requisi√ß√£o',
        descricao: 'Modifica√ß√£o n√£o autorizada de par√¢metros HTTP para alterar comportamento da aplica√ß√£o',
        impacto: 'Altera√ß√£o n√£o autorizada de dados ou bypass de controles de seguran√ßa',
        probabilidade: 'Alta',
        severidade: 'M√©dia',
        mitigacao: 'Valida√ß√£o robusta de entrada, assinatura de tokens, controle de integridade',
        capec: 'CAPEC-137, CAPEC-160',
        deteccao: 'Monitoramento de anomalias em par√¢metros de requisi√ß√£o'
      },
      {
        id: 'T003',
        stride: ['I', 'R'],
        categoria: 'Exposi√ß√£o de Dados',
        ameaca: 'Vazamento de informa√ß√µes atrav√©s de logs',
        descricao: 'Dados sens√≠veis podem ser expostos atrav√©s de logs de sistema mal configurados',
        impacto: 'Exposi√ß√£o de informa√ß√µes confidenciais e dados pessoais',
        probabilidade: 'M√©dia',
        severidade: 'M√©dia',
        mitigacao: 'Configura√ß√£o adequada de logs, sanitiza√ß√£o de dados sens√≠veis, controle de acesso aos logs',
        capec: 'CAPEC-117, CAPEC-204',
        deteccao: 'Auditoria regular dos logs e configura√ß√µes de logging'
      },
      {
        id: 'T004',
        stride: ['D'],
        categoria: 'Nega√ß√£o de Servi√ßo',
        ameaca: 'Ataques de DDoS na camada de aplica√ß√£o',
        descricao: 'Sobrecarga intencional do sistema atrav√©s de requisi√ß√µes maliciosas',
        impacto: 'Indisponibilidade do servi√ßo e degrada√ß√£o da performance',
        probabilidade: 'Alta',
        severidade: 'Alta',
        mitigacao: 'Rate limiting, WAF, CDN, monitoramento de tr√°fego',
        capec: 'CAPEC-125, CAPEC-130',
        deteccao: 'Monitoramento de m√©tricas de performance e padr√µes de tr√°fego'
      },
      {
        id: 'T005',
        stride: ['E', 'S'],
        categoria: 'Escala√ß√£o de Privil√©gios',
        ameaca: 'Explora√ß√£o de vulnerabilidades para eleva√ß√£o de privil√©gios',
        descricao: 'Atacantes podem explorar falhas de configura√ß√£o para obter acesso administrativo',
        impacto: 'Acesso n√£o autorizado a funcionalidades cr√≠ticas do sistema',
        probabilidade: 'Baixa',
        severidade: 'Cr√≠tica',
        mitigacao: 'Princ√≠pio do menor privil√©gio, auditoria de permiss√µes, monitoramento de atividades administrativas',
        capec: 'CAPEC-233, CAPEC-250',
        deteccao: 'Monitoramento de tentativas de escala√ß√£o de privil√©gios'
      },
      {
        id: 'T006',
        stride: ['R', 'T'],
        categoria: 'Rep√∫dio de Transa√ß√µes',
        ameaca: 'Manipula√ß√£o de logs para negar transa√ß√µes',
        descricao: 'Altera√ß√£o maliciosa de logs para esconder atividades fraudulentas',
        impacto: 'Incapacidade de comprovar transa√ß√µes em disputas regulat√≥rias',
        probabilidade: 'Baixa',
        severidade: 'Alta',
        mitigacao: 'Logs imut√°veis com assinaturas digitais, WAL (Write-Ahead Logging)',
        capec: 'CAPEC-98, CAPEC-99',
        deteccao: 'Verifica√ß√£o de integridade dos logs atrav√©s de hashes criptogr√°ficos'
      }
    ];

    // Filtrar amea√ßas baseado no tipo de sistema
    switch (systemType) {
      case 'web':
        return baseThreats.filter(t => ['T001', 'T002', 'T004'].includes(t.id));
      case 'api':
        return baseThreats.filter(t => ['T002', 'T003', 'T004'].includes(t.id));
      case 'mobile':
        return baseThreats.filter(t => ['T001', 'T003', 'T005'].includes(t.id));
      default:
        return baseThreats;
    }
  }
}

// Inst√¢ncia global do cliente
window.threatModelingClient = new ThreatModelingClient();
