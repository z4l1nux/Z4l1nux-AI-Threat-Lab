/**
 * Cliente JavaScript para Threat Modeling
 * Usa o novo servi√ßo TypeScript dedicado
 */

class ThreatModelingClient {
  constructor() {
    this.baseUrl = window.location.origin;
  }

  /**
   * Gera an√°lise de threat modeling
   */
  async generateThreatModeling(request) {
    try {
      console.log('üîç Enviando requisi√ß√£o de threat modeling:', request);
      
      const response = await fetch(`${this.baseUrl}/api/threat-modeling`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('üì° Resposta recebida:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå Erro na requisi√ß√£o de threat modeling:', error);
      throw error;
    }
  }

  /**
   * Processa resposta da IA usando o servi√ßo TypeScript
   */
  processAIResponse(aiResponse, systemType) {
    // Esta fun√ß√£o agora ser√° chamada do servidor TypeScript
    // Mantida aqui para compatibilidade com o frontend existente
    return this.parseThreatsFromResponse(aiResponse, systemType);
  }

  /**
   * Parse b√°sico de amea√ßas da resposta (fallback)
   */
  parseThreatsFromResponse(aiResponse, systemType) {
    try {
      let threats = [];
      
      // Tentar parsear JSON
      try {
        const directParse = JSON.parse(aiResponse);
        threats = directParse.threats || directParse.ameacas || [];
      } catch (e) {
        // Procurar JSON em blocos de c√≥digo
        const jsonBlockMatch = aiResponse.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/i);
        if (jsonBlockMatch) {
          try {
            const parsed = JSON.parse(jsonBlockMatch[1]);
            threats = parsed.threats || parsed.ameacas || [];
          } catch (parseError) {
            console.log('‚ùå Erro ao parsear JSON do bloco:', parseError);
          }
        }
      }

      if (threats.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma amea√ßa encontrada, usando mock');
        threats = this.getMockThreatsForSystem(systemType);
      }

      return threats;
    } catch (error) {
      console.error('‚ùå Erro ao processar resposta da IA:', error);
      return this.getMockThreatsForSystem(systemType);
    }
  }

  /**
   * Amea√ßas mock para fallback
   */
  getMockThreatsForSystem(systemType) {
    const baseThreats = [
      {
        id: 'T001',
        stride: ['S', 'I'],
        categoria: 'Autentica√ß√£o',
        ameaca: 'Ataques de for√ßa bruta contra sistema de login',
        descricao: 'Atacantes podem tentar quebrar senhas atrav√©s de ataques automatizados de for√ßa bruta',
        impacto: 'Comprometimento de contas de usu√°rios e acesso n√£o autorizado ao sistema',
        probabilidade: 'M√©dia',
        severidade: 'Alta',
        mitigacao: 'Implementar bloqueio de conta ap√≥s tentativas falhidas, CAPTCHA, autentica√ß√£o multifator',
        capec: 'CAPEC-16, CAPEC-49',
        deteccao: 'Monitoramento de tentativas de login falhidas consecutivas'
      },
      {
        id: 'T002',
        stride: ['T', 'E'],
        categoria: 'Integridade de Dados',
        ameaca: 'Manipula√ß√£o de par√¢metros de requisi√ß√£o',
        descricao: 'Modifica√ß√£o n√£o autorizada de par√¢metros HTTP para alterar comportamento da aplica√ß√£o',
        impacto: 'Altera√ß√£o n√£o autorizada de dados ou bypass de controles de seguran√ßa',
        probabilidade: 'Alta',
        severidade: 'M√©dia',
        mitigacao: 'Valida√ß√£o robusta de entrada, assinatura de tokens, controle de integridade',
        capec: 'CAPEC-137, CAPEC-160',
        deteccao: 'Monitoramento de anomalias em par√¢metros de requisi√ß√£o'
      },
      {
        id: 'T003',
        stride: ['I', 'R'],
        categoria: 'Exposi√ß√£o de Dados',
        ameaca: 'Vazamento de informa√ß√µes atrav√©s de logs',
        descricao: 'Dados sens√≠veis podem ser expostos atrav√©s de logs de sistema mal configurados',
        impacto: 'Exposi√ß√£o de informa√ß√µes confidenciais e dados pessoais',
        probabilidade: 'M√©dia',
        severidade: 'M√©dia',
        mitigacao: 'Configura√ß√£o adequada de logs, sanitiza√ß√£o de dados sens√≠veis, controle de acesso aos logs',
        capec: 'CAPEC-117, CAPEC-204',
        deteccao: 'Auditoria regular dos logs e configura√ß√µes de logging'
      },
      {
        id: 'T004',
        stride: ['D'],
        categoria: 'Nega√ß√£o de Servi√ßo',
        ameaca: 'Ataques de DDoS na camada de aplica√ß√£o',
        descricao: 'Sobrecarga intencional do sistema atrav√©s de requisi√ß√µes maliciosas',
        impacto: 'Indisponibilidade do servi√ßo e degrada√ß√£o da performance',
        probabilidade: 'Alta',
        severidade: 'Alta',
        mitigacao: 'Rate limiting, WAF, CDN, monitoramento de tr√°fego',
        capec: 'CAPEC-125, CAPEC-130',
        deteccao: 'Monitoramento de m√©tricas de performance e padr√µes de tr√°fego'
      },
      {
        id: 'T005',
        stride: ['E', 'S'],
        categoria: 'Escala√ß√£o de Privil√©gios',
        ameaca: 'Explora√ß√£o de vulnerabilidades para eleva√ß√£o de privil√©gios',
        descricao: 'Atacantes podem explorar falhas de configura√ß√£o para obter acesso administrativo',
        impacto: 'Acesso n√£o autorizado a funcionalidades cr√≠ticas do sistema',
        probabilidade: 'Baixa',
        severidade: 'Cr√≠tica',
        mitigacao: 'Princ√≠pio do menor privil√©gio, auditoria de permiss√µes, monitoramento de atividades administrativas',
        capec: 'CAPEC-233, CAPEC-250',
        deteccao: 'Monitoramento de tentativas de escala√ß√£o de privil√©gios'
      },
      {
        id: 'T006',
        stride: ['R', 'T'],
        categoria: 'Rep√∫dio de Transa√ß√µes',
        ameaca: 'Manipula√ß√£o de logs para negar transa√ß√µes',
        descricao: 'Altera√ß√£o maliciosa de logs para esconder atividades fraudulentas',
        impacto: 'Incapacidade de comprovar transa√ß√µes em disputas regulat√≥rias',
        probabilidade: 'Baixa',
        severidade: 'Alta',
        mitigacao: 'Logs imut√°veis com assinaturas digitais, WAL (Write-Ahead Logging)',
        capec: 'CAPEC-98, CAPEC-99',
        deteccao: 'Verifica√ß√£o de integridade dos logs atrav√©s de hashes criptogr√°ficos'
      }
    ];

    // Filtrar amea√ßas baseado no tipo de sistema
    switch (systemType) {
      case 'web':
        return baseThreats.filter(t => ['T001', 'T002', 'T004'].includes(t.id));
      case 'api':
        return baseThreats.filter(t => ['T002', 'T003', 'T004'].includes(t.id));
      case 'mobile':
        return baseThreats.filter(t => ['T001', 'T003', 'T005'].includes(t.id));
      default:
        return baseThreats;
    }
  }
}

// Inst√¢ncia global do cliente
window.threatModelingClient = new ThreatModelingClient();
